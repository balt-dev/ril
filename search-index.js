var searchIndex = JSON.parse('{\
"ril":{"doc":"","t":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,3,4,13,8,13,13,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,10,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,8,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,13,13,13,13,13,13,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,13,4,4,13,13,13,17,13,13,3,3,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,13,13,13,13,6,13,13,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,13,13,3,4,13,13,4,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,8,3,13,4,3,13,8,3,13,3,13,12,10,11,11,10,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,12,12,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,12,12,12,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"n":["Alpha","BitPixel","Border","BorderPosition","ByteStream","Decoder","Draw","Dynamic","Error","Image","ImageFormat","L","OverlayMode","Paste","Pixel","Rectangle","Result","Rgb","Rgba","draw","encode","encodings","error","image","pixel","prelude","Border","BorderPosition","Center","Draw","Inset","Outset","Paste","Rectangle","border","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","color","default","default","default","draw","draw","draw","eq","fill","fmt","fmt","fmt","from","from","from","from","from_bounding_box","hash","image","into","into","into","into","mask","new","new","new","overlay","overlay","position","position","position","size","thickness","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_border","with_color","with_fill","with_mask","with_mask_unchecked","with_overlay_mode","with_overlay_mode","with_position","with_position","with_position","with_size","with_thickness","ByteStream","Decoder","Encoder","borrow","borrow_mut","decode","encode","from","into","new","peek","position","read","read_to","read_to_end","read_u32","read_u8","remaining","rewind","seek","try_from","try_into","type_id","Bit","ColorType","L","L","LA","LA","Palette","Palette","PixelData","Rgb","Rgb","Rgba","Rgba","borrow","borrow","borrow_mut","borrow_mut","channels","clone","clone","clone_into","clone_into","data","eq","eq","fmt","fmt","from","from","from","from_raw","hash","hash","into","into","ne","png","to_owned","to_owned","try_from","try_from","try_into","try_into","type_data","type_id","type_id","0","0","0","0","0","0","1","1","1","2","2","3","Average","ColorType","FilterType","L","LA","None","PNG_SIGNATURE","Paeth","Palette","PngDecoder","PngEncoder","PngHeader","RGB","RGBA","Sub","Up","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channels","clone","clone","clone_into","clone_into","compression_level","decode","default","default","default","default","default","encode","eq","eq","filter","filter_type","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","hash","idat","ihdr","into","into","into","into","into","new","new","reconstruct","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","with_compression_level","with_compression_level_unchecked","with_filter_method","DecodingError","EmptyImageError","Error","IOError","IncompatibleImageData","InvalidExtension","InvalidHexCode","Result","UnknownEncodingFormat","UnsupportedColorType","borrow","borrow_mut","fmt","fmt","from","from","into","to_string","try_from","try_into","type_id","0","0","0","0","height","received","width","Bmp","Gif","Image","ImageFormat","Jpeg","Merge","OverlayMode","Png","Replace","Tiff","Unknown","WebP","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","convert","crop","cropped","data","decode_from_bytes","decode_inferred_from_bytes","default","default","dimensions","draw","encode","eq","eq","flip","flipped","fmt","fmt","fmt","fmt","format","from","from","from","from_extension","from_fn","from_mime_type","from_path","from_pixels","get_pixel","hash","height","infer_encoding","into","into","into","invert","inverted","is_empty","is_unknown","len","map_data","map_in_place","map_pixels","map_pixels_with_coords","map_rows","mask_alpha","mirror","mirrored","new","open","overlay_mode","paste","paste_with_mask","pixel","pixel_mut","pixels","run_decoder","run_encoder","save","set_data","set_format","set_pixel","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","width","with","with_overlay_mode","0","0","Alpha","BitPixel","BitPixel","Dynamic","L","L","Pixel","Rgb","Rgb","Rgba","Rgba","a","alpha","alpha","alpha","as_pixel_data","as_pixel_data","as_pixel_data","as_pixel_data","as_pixel_data","as_pixel_data","b","b","black","black","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_hex","from_hex","from_pixel_data","from_pixel_data","from_pixel_data","from_pixel_data","from_pixel_data","from_pixel_data","from_rgb","g","g","into","into","into","into","into","inverted","inverted","inverted","inverted","inverted","inverted","luminance","merge","merge","ne","ne","ne","ne","ne","new","new","new","new","off","on","overlay","r","r","to_owned","to_owned","to_owned","to_owned","to_owned","transparent","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value","value","white","white","with_alpha","with_alpha","with_alpha","0","0","0","0","Alpha","BitPixel","Border","BorderPosition","Draw","Dynamic","Image","ImageFormat","L","OverlayMode","Paste","Pixel","Rectangle","Rgb","Rgba"],"q":["ril","","","","","","","","","","","","","","","","","","","","","","","","","","ril::draw","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ril::encode","","","","","","","","","","","","","","","","","","","","","","","ril::encodings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ril::encodings::PixelData","","","","","","","","","","","","ril::encodings::png","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ril::error","","","","","","","","","","","","","","","","","","","","","ril::error::Error","","","","","","","ril::image","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ril::pixel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ril::pixel::Dynamic","","","","ril::prelude","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","Represents a shape border.","Represents whether a border is inset, outset, or if it …","A border that is balanced between the inside and outside …","","An inset border. May overlap the contents of inside the …","An outset border. May overlap the contents of outside the …","Pastes or overlays an image on top of another image.","A rectangle.","The border data of the rectangle, or None if there is no …","","","","","","","","","","","","","","","","","The color of the border.","","","","Draws the object to the given image.","","","","The fill color of the rectangle, or None if there is no …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new rectangle from two coordinates specified as …","","The image to paste, or the foreground image.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","An image that masks or filters out pixels based on the …","todo!()","Creates a new rectangle with default values.","Creates a new image paste with from the given image with …","The overlay mode of the rectangle, or None to inherit from …","The overlay mode of the image, or None to inherit from the …","The position of the border.","The position of the rectangle. The top-left corner of the …","The position of the image to paste.","The dimensions of the rectangle, in pixels.","The thickness of the border, in pixels.","","","","","","","","","","","","","","","","","Sets the border information of the rectangle.","","Sets the fill color of the rectangle.","Sets the mask image to use. Currently this is only limited …","Sets the mask image to use. Currently this is only limited …","Sets the overlay mode of the rectangle.","Sets the overlay mode of the image.","","Sets the position of the rectangle.","Sets the position of where to paste the image at. The …","Sets the size of the rectangle in pixels.","todo!()","","","","","","todo!()","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Reads data and transmutes it to T.","","todo!()","todo!()","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Decodes a PNG image into an image.","Encodes an image into a PNG image.","","","","","","","","","","","","","","","","","","","","","The compression level to compress IDAT pixel data. Must be …","","","","","","","","","","","The default filtering type to use per row.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","THe accumulative IDAT chunks containing pixel data about …","The decoded IHDR metadata about the image.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new PNG decoder.","Creates a new PNG encoder.","","","","","","","","","","","","","","","","","","","","Sets the compression level. Must be a value between 0 and …","Sets the compression level. Should be a value between 0 …","Sets the default filter type to use per row.","Invalid data was encountered when an image, usually …","Tried to encode an empty image, or an image without data.","Represents an error that occurs within the crate.","An error occured when trying to read a file or when trying …","An image received data incompatible with the image’s …","An invalid extension was provided when trying to resolve …","An invalid hex code was provided when trying to parse a …","","No encoding format could be inferred for the given image.","Received an unsupported color type when trying to create a …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","The image is encoded in the BMP format.","The image is encoded in the GIF format.","A high-level image representation.","Represents the underlying encoding format of an image.","The image is encoded in the JPEG format.","Merge the alpha values of overlay image with the alpha …","The behavior to use when overlaying images on top of each …","The image is encoded in the PNG format.","Replace alpha values with the alpha values of the overlay …","The image is encoded in the TIFF format.","No known encoding is known for the image.","The image is encoded in the WebP format.","","","","","","","","","","","","","Converts the image into an image with the given pixel type.","Crops this image in place to the given bounding box.","Takes this image and crops it to the given box. Useful for …","","Decodes an image with the explicitly given image encoding …","Decodes an image from the given bytes, inferring its …","","","Returns the dimensions of the image.","Draws an object or shape onto this image.","Encodes the image with the given encoding and writes it to …","","","Flips this image vertically (about the x-axis) in place.","Takes this image and flips it vertically, or about the …","","","","","Returns the encoding format of the image. This is nothing …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Parses the given extension and returns the corresponding …","Creates a new image with the given width and height. The …","Returns the format specified by the given MIME type.","Returns the format specified by the given path.","Creates a new image shaped with the given width and a …","Returns a reference of the pixel at the given coordinates, …","","Returns the height of the image.","Infers the encoding format from the given data via a byte …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Inverts this image in place.","Takes this image and inverts it. Useful for method …","Returns true if the image contains no pixels.","Returns whether the extension is unknown.","Returns the amount of pixels in the image.","Returns the image replaced with the given data. It is up …","Similar to [<code>map_pixels_with_coords</code>], but this maps the …","Returns the image with each pixel in the image mapped to …","Returns the image with the each pixel in the image mapped …","Returns the image with each row of pixels represented as a …","Masks the alpha values of this image with the luminance …","Mirrors, or flips this image horizontally (about the …","Takes this image and flips it horizontally (about the …","Creates a new image with the given width and height, with …","Opens a file from the given path and decodes it into an …","Returns the overlay mode of the image.","Pastes the given image onto this image at the given x and …","Pastes the given image onto this image at the given x and …","Returns a reference of the pixel at the given coordinates.","Returns a mutable reference to the pixel at the given …","Returns a Vec of slices representing the pixels of the …","Decodes the image data from a <code>ByteStream</code> into an image.","Encodes the <code>Image</code> into raw bytes.","Saves the image with the given encoding to the given path. …","Sets the data of this image to the new data. This is used …","Sets the encoding format of this image. Note that when …","Sets the pixel at the given coordinates to the given pixel.","","","","","","","","","","","","","","","Returns the width of the image.","Takes this image, draws the given object or shape onto it, …","Returns the same image with its overlay mode set to the …","Whether the pixel is on.","The luminance value of the pixel, between 0 and 255.","Represents a pixel that supports alpha, or transparency …","Represents a single-bit pixel that represents either a …","","Represents a pixel type that is dynamically resolved.","Represents an L, or luminance pixel that is stored as only …","","Represents any type of pixel in an image.","Represents an RGB pixel.","","Represents an RGBA pixel.","","The alpha component of the pixel.","Returns the alpha, or opacity level of the pixel.","","","Creates raw pixel data from this pixel type.","","","","","","The blue component of the pixel.","The blue component of the pixel.","Creates a completely black pixel.","Creates an opaque black pixel.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","Parses an RGB pixel from a hex value.","Parses an RGBA pixel from a hex value.","Creates this pixel from raw data.","","","","","","Creates an opaque pixel from an RGB pixel.","The green component of the pixel.","The green component of the pixel.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the inverted value of this pixel.","","","","","","The luminance of the pixel.","Merges this pixel with the given overlay pixel, taking …","","","","","","","Returns a new <code>BitPixel</code> with the given value.","Creates a new L pixel with the given luminance value.","Creates a new RGB pixel.","Creates a new RGBA pixel.","Returns a new <code>BitPixel</code> that is off.","Returns a new <code>BitPixel</code> that is on.","Overlays this pixel with the given overlay pixel, abiding …","The red component of the pixel.","The red component of the pixel.","","","","","","Creates a completely transparent pixel.","","","","","","","","","","","","","","","","Returns the value of the pixel.","Returns the luminance value of the pixel.","Creates a completely white pixel.","Creates an opaque white pixel.","Clones this pixel with the given alpha value.","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,2,1,3,2,4,1,3,2,4,1,3,2,4,1,3,2,4,3,1,3,2,5,2,4,1,2,1,3,2,1,3,2,4,2,1,4,1,3,2,4,4,3,2,4,2,4,3,2,4,2,3,1,3,2,4,1,3,2,4,1,3,2,4,1,3,2,4,2,3,2,4,4,2,4,3,2,4,2,3,0,0,0,6,6,7,8,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,9,0,10,9,10,9,10,9,0,10,9,10,9,10,9,10,9,10,10,9,10,9,9,10,9,10,9,10,10,9,9,10,9,10,9,9,0,10,9,10,9,10,9,9,10,9,11,12,13,14,15,16,13,14,15,14,15,15,17,0,0,18,18,17,0,17,18,0,0,0,18,18,17,17,19,18,20,17,21,19,18,20,17,21,18,18,17,18,17,21,19,19,18,20,17,21,21,18,17,17,21,18,20,17,21,19,18,18,20,17,17,21,18,19,19,19,18,20,17,21,19,21,17,18,17,19,18,18,20,17,21,19,18,20,17,21,19,18,20,17,21,21,21,21,22,22,0,22,22,22,22,0,22,22,22,22,22,22,22,22,22,22,22,22,22,23,24,25,26,27,27,27,28,28,0,0,28,29,0,28,29,28,28,28,29,30,28,29,30,28,29,30,28,29,30,28,30,30,30,30,30,30,29,28,30,30,30,29,28,30,30,29,29,28,28,30,29,30,28,28,30,28,28,30,30,28,30,28,29,30,28,30,30,30,28,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,28,28,30,30,30,30,29,30,28,29,28,29,30,28,29,30,28,29,30,28,30,30,30,31,32,0,0,33,0,0,33,0,0,33,0,33,34,35,34,33,36,31,32,37,34,33,37,34,37,34,31,32,37,34,33,31,32,37,34,33,31,32,37,34,33,31,32,37,34,33,31,32,37,34,33,31,32,37,34,33,31,32,37,34,33,31,31,31,31,31,32,32,32,32,32,37,37,37,37,37,34,34,34,34,34,33,33,33,33,33,37,34,36,31,32,37,34,33,34,37,34,31,32,37,34,33,36,31,32,37,34,33,36,36,34,31,32,37,34,33,31,32,37,34,31,31,36,37,34,31,32,37,34,33,34,31,32,37,34,33,31,32,37,34,33,31,32,37,34,33,31,32,37,34,35,34,33,38,39,40,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["borderposition",4]],[[["",0]],["border",3]],[[["",0]],["rectangle",3]],[[["",0]],["paste",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[],["borderposition",4]],[[],["border",3]],[[],["rectangle",3]],[[["",0],["image",3]]],[[["",0],["image",3]]],[[["",0],["image",3]]],[[["",0],["borderposition",4]],["bool",0]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["u32",0],["u32",0],["u32",0],["u32",0]]],[[["",0],["",0]]],null,[[]],[[]],[[]],[[]],null,[[["u32",0]]],[[]],[[["image",3]]],null,null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["border",3]]],[[]],[[]],[[["image",3,[["bitpixel",3]]]]],[[["image",3,[["bitpixel",3]]]]],[[["overlaymode",4]]],[[["overlaymode",4]]],[[["borderposition",4]]],[[["u32",0],["u32",0]]],[[["u32",0],["u32",0]]],[[["u32",0],["u32",0]]],[[["u32",0]]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["bytestream",3]],["result",6,[["image",3,[["pixel",8]]]]]],[[["",0],["image",3]],["result",6]],[[]],[[]],[[]],[[["",0],["usize",0]]],[[["",0]],["usize",0]],[[["",0],["usize",0]]],[[["",0]]],[[["",0]]],[[["",0]],["result",6,[["u32",0]]]],[[["",0]],["result",6,[["u8",0]]]],[[["",0]],["usize",0]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["usize",0]],[[["",0]],["colortype",4]],[[["",0]],["pixeldata",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["vec",3,[["u8",0]]]],[[["",0],["colortype",4]],["bool",0]],[[["",0],["pixeldata",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["colortype",4]]],[[]],[[]],[[["colortype",4],["u8",0]],["result",6]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[["",0],["pixeldata",4]],["bool",0]],null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["usize",0]],[[["",0]],["colortype",4]],[[["",0]],["filtertype",4]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[["",0],["bytestream",3]],["result",6,[["image",3,[["pixel",8]]]]]],[[]],[[],["colortype",4]],[[],["pngheader",3]],[[],["filtertype",4]],[[]],[[["",0],["image",3]],["result",6]],[[["",0],["colortype",4]],["bool",0]],[[["",0],["filtertype",4]],["bool",0]],[[["",0],["u8",0],["u8",0],["u8",0],["u8",0]],["u8",0]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["colortype",4]]],[[]],[[]],[[]],[[["u8",0]]],[[]],[[["",0],["",0]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["option",4],["vec",3],["usize",0],["usize",0]],["u8",0]],[[["",0]]],[[["",0]]],[[],["result",4]],[[["u8",0]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["u8",0]]],[[["u8",0]]],[[["filtertype",4]]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["error",3]]],[[]],[[]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["overlaymode",4]],[[["",0]],["image",3]],[[["",0]],["imageformat",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["image",3,[["",26,[["pixel",8],["from",8]]]]]],[[["",0],["u32",0],["u32",0],["u32",0],["u32",0]]],[[["u32",0],["u32",0],["u32",0],["u32",0]]],null,[[["imageformat",4]],["result",6]],[[],["result",6]],[[],["overlaymode",4]],[[],["imageformat",4]],[[["",0]]],[[["",0]]],[[["",0],["imageformat",4]],["result",6]],[[["",0],["overlaymode",4]],["bool",0]],[[["",0],["imageformat",4]],["bool",0]],[[["",0]]],[[]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0]],["imageformat",4]],[[]],[[]],[[]],[[],["result",6]],[[["u32",0],["u32",0]]],[[]],[[],["result",6]],[[["u32",0]]],[[["",0],["u32",0],["u32",0]],["option",4]],[[["",0],["",0]]],[[["",0]],["u32",0]],[[["bytestream",3]]],[[]],[[]],[[]],[[["",0]]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["u32",0]],[[],["image",3,[["pixel",8]]]],[[["",0]]],[[],["image",3,[["pixel",8]]]],[[],["image",3,[["pixel",8]]]],[[],["image",3,[["pixel",8]]]],[[["",0],["image",3]]],[[["",0]]],[[]],[[["u32",0],["u32",0]]],[[],["result",6]],[[["",0]],["overlaymode",4]],[[["",0],["u32",0],["u32",0],["image",3]]],[[["",0],["u32",0],["u32",0],["image",3],["image",3,[["bitpixel",3]]]]],[[["",0],["u32",0],["u32",0]],["",0]],[[["",0],["u32",0],["u32",0]],["",0]],[[["",0]],["vec",3]],[[["",0],["bytestream",3]],["result",6,[["image",3,[["pixel",8]]]]]],[[["",0],["image",3]],["result",6]],[[["",0],["imageformat",4]],["result",6]],[[["",0],["vec",3]]],[[["",0],["imageformat",4]]],[[["",0],["u32",0],["u32",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["u32",0]],[[]],[[["overlaymode",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["pixeldata",4]],[[["",0]],["pixeldata",4]],[[["",0]],["pixeldata",4]],[[["",0]],["pixeldata",4]],[[["",0]],["pixeldata",4]],[[["",0]],["pixeldata",4]],null,null,[[]],[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["bitpixel",3]],[[["",0]],["l",3]],[[["",0]],["rgb",3]],[[["",0]],["rgba",3]],[[["",0]],["dynamic",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["bitpixel",3]],[[],["l",3]],[[],["rgb",3]],[[],["rgba",3]],[[]],[[["",0],["bitpixel",3]],["bool",0]],[[["",0],["l",3]],["bool",0]],[[["",0],["rgb",3]],["bool",0]],[[["",0],["rgba",3]],["bool",0]],[[["",0],["dynamic",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["l",3]]],[[["dynamic",4]]],[[["rgba",3]]],[[["rgb",3]]],[[["rgba",3]]],[[["rgb",3]]],[[["bitpixel",3]]],[[["dynamic",4]]],[[]],[[["dynamic",4]]],[[["bitpixel",3]]],[[]],[[["l",3]]],[[["rgba",3]]],[[["dynamic",4]]],[[]],[[["bitpixel",3]]],[[["rgb",3]]],[[["l",3]]],[[["rgba",3]]],[[["rgb",3]]],[[]],[[["l",3]]],[[["bitpixel",3]]],[[],["result",6]],[[["str",0]],["result",6]],[[["pixeldata",4]],["result",6]],[[["pixeldata",4]],["result",6]],[[["pixeldata",4]],["result",6]],[[["pixeldata",4]],["result",6]],[[["pixeldata",4]],["result",6]],[[["pixeldata",4]],["result",6]],[[["rgb",3]]],null,null,[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["u8",0]],[[]],[[]],[[["",0],["bitpixel",3]],["bool",0]],[[["",0],["l",3]],["bool",0]],[[["",0],["rgb",3]],["bool",0]],[[["",0],["rgba",3]],["bool",0]],[[["",0],["dynamic",4]],["bool",0]],[[["bool",0]]],[[["u8",0]]],[[["u8",0],["u8",0],["u8",0]]],[[["u8",0],["u8",0],["u8",0],["u8",0]]],[[]],[[]],[[["overlaymode",4]]],null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["bool",0]],[[["",0]],["u8",0]],[[]],[[]],[[["u8",0]]],[[["u8",0]]],[[["u8",0]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[4,"BorderPosition"],[3,"Rectangle"],[3,"Border"],[3,"Paste"],[8,"Draw"],[3,"ByteStream"],[8,"Decoder"],[8,"Encoder"],[4,"PixelData"],[4,"ColorType"],[13,"Bit"],[13,"L"],[13,"LA"],[13,"Rgb"],[13,"Rgba"],[13,"Palette"],[4,"FilterType"],[4,"ColorType"],[3,"PngDecoder"],[3,"PngHeader"],[3,"PngEncoder"],[4,"Error"],[13,"InvalidHexCode"],[13,"InvalidExtension"],[13,"DecodingError"],[13,"IOError"],[13,"IncompatibleImageData"],[4,"ImageFormat"],[4,"OverlayMode"],[3,"Image"],[3,"BitPixel"],[3,"L"],[4,"Dynamic"],[3,"Rgba"],[8,"Alpha"],[8,"Pixel"],[3,"Rgb"],[13,"BitPixel"],[13,"L"],[13,"Rgb"],[13,"Rgba"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};