var searchIndex = JSON.parse('{\
"ril":{"doc":"The Rust Imaging Library. A performant and high-level â€¦","t":[12,12,8,18,13,8,13,13,3,13,13,13,3,4,13,13,18,13,13,13,13,16,4,16,8,13,4,8,4,13,4,4,3,13,8,13,4,13,3,13,3,8,13,13,13,4,13,3,4,3,13,13,13,13,13,13,13,3,13,13,13,13,13,4,13,13,13,13,13,13,4,13,13,8,3,3,3,8,13,13,13,3,13,4,6,3,13,13,3,13,13,13,16,13,16,3,3,13,13,8,13,13,13,13,4,13,13,4,12,11,11,10,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,12,12,10,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,10,11,11,10,11,11,11,11,11,11,11,12,11,11,10,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,10,11,11,10,11,11,0,12,12,12,12,12,0,12,12,12,11,11,11,11,11,0,12,12,11,11,11,0,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,4,13,8,3,13,13,3,3,12,12,11,12,10,12,12,11,11,12,12,11,11,11,11,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,4,8,8,13,13,16,13,10,10,10,11,11,11,10,10,11,12,12,12,12,4,13,13,13,13,13,13,13,11,0,11,11,0,0,0,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,3,13,13,4,13,13,4,13,13,13,13,3,3,13,13,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,13,13,13,4,13,13,13,13,13,13,6,13,13,12,12,12,12,12,12,12,12,12,12,12,8,18,3,13,13,18,16,16,4,4,3,13,3,3,8,3,3,8,3,13,3,13,16,8,13,12,10,11,10,11,10,11,10,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,10,11,10,11,12,12,11,11,12,12,11,11,11,11,10,11,10,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,10,10,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,12,12,12,12,12,2,8,13,13,2,13,2,2,13,2,2,2,2,2,2,2,2,2,2,13,13,2,3,4,2,13,2,13,2,13,13,13,4,2,2,2,2,2,13,2,13,4,2,2,2,2,13,2,13,2,13,2,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,13,3,3,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,13,13,13,13,3,4,13,13,13,3,3,13,4,13,4,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["0","0","Alpha","BIT_DEPTH","Background","Banded","Bicubic","Bilinear","BitPixel","BitPixel","Bmp","Bool","Border","BorderPosition","Bottom","Box","COLOR_TYPE","Center","Center","Center","Character","Color","ColorType","Data","Decoder","DecodingError","DisposalMethod","Draw","Dynamic","Dynamic","DynamicFrameIterator","DynamicSubpixel","Ellipse","EmptyImageError","Encoder","EncodingError","Error","Exactly","Font","FontError","Frame","FrameIterator","Gif","Gif","Hamming","HorizontalAnchor","IOError","Image","ImageFormat","ImageSequence","IncompatibleImageData","Infinite","Inset","InvalidExtension","InvalidHexCode","InvalidPaletteIndex","Jpeg","L","L","L","LA","Lanczos3","Left","LoopCount","Merge","Mitchell","Nearest","None","None","Outset","OverlayMode","PaletteRgb","PaletteRgba","Paletted","PalettedRgb","PalettedRgba","Paste","Pixel","Png","Png","Previous","Rectangle","Replace","ResizeAlgorithm","Result","Rgb","Rgb","Rgb","Rgba","Rgba","Rgba","Right","Sequence","Single","Subpixel","TextLayout","TextSegment","Tiff","Top","TrueColor","U8","Unknown","UnknownEncodingFormat","UnsupportedColorType","VerticalAnchor","WebP","Word","WrapStyle","a","add","add_assign","alpha","alpha","alpha","as_bytes","as_bytes","as_bytes","as_bytes","as_bytes","as_bytes","as_bytes","as_bytes","as_rgb_tuple","as_rgb_tuple","as_rgb_tuple","as_rgb_tuple","as_rgb_tuple","as_rgb_tuple","as_rgba_tuple","as_rgba_tuple","as_rgba_tuple","as_rgba_tuple","as_rgba_tuple","as_rgba_tuple","b","b","bands","border","border","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","color","color","color_type","color_type","color_unchecked","data","decode","decode_sequence","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","div","div_assign","draw","draw","draw","draw","draw","draw","draw","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","encode","encode","encode_sequence","encodings","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error","fill","fill","fill","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","font","force_into_rgb","force_into_rgb","force_into_rgb","force_into_rgb","force_into_rgb","force_into_rgb","force_into_rgb","force_into_rgb","force_into_rgba","force_into_rgba","force_into_rgba","force_into_rgba","force_into_rgba","force_into_rgba","force_into_rgba","force_into_rgba","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_arbitrary_palette","from_bands","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_dynamic","from_dynamic","from_dynamic","from_dynamic","from_dynamic","from_dynamic","from_dynamic","from_dynamic","from_iter","from_iter","from_palette","from_palette","from_palette","from_raw_parts","from_raw_parts_paletted","from_raw_parts_paletted","from_raw_parts_paletted","from_raw_parts_paletted","from_raw_parts_paletted","from_raw_parts_paletted","from_raw_parts_paletted","from_raw_parts_paletted","from_rgb_tuple","from_rgb_tuple","from_rgb_tuple","from_rgb_tuple","from_rgb_tuple","from_rgb_tuple","from_rgba_tuple","from_rgba_tuple","from_rgba_tuple","from_rgba_tuple","from_rgba_tuple","from_rgba_tuple","g","g","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","image","index","index","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_rgb","into_rgb","into_rgb","into_rgb","into_rgb","into_rgb","into_rgba","into_rgba","into_rgba","into_rgba","into_rgba","into_rgba","into_sequence","into_sequence","inverted","inverted","inverted","inverted","inverted","inverted","inverted","inverted","is_empty","len","len","loop_count","loop_count","luminance","map_subpixels","map_subpixels","map_subpixels","map_subpixels","map_subpixels","map_subpixels","map_subpixels","map_subpixels","mask","merge","merge","merge_with_alpha","merge_with_alpha","merge_with_alpha","merge_with_alpha","merge_with_alpha","merge_with_alpha","merge_with_alpha","merge_with_alpha","mul","mul_assign","next","overlay","overlay","overlay","overlay","overlay","overlay_with_alpha","palette","palette","palette","palette_index","palette_index","palette_index","pixel","position","position","position","position","position","prelude","r","r","radii","rem","rem_assign","saturating_add","saturating_mul","saturating_sub","sequence","size","size","size_hint","sub","sub_assign","text","text","thickness","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","width","with_alpha","with_alpha","with_alpha","wrap","0","0","0","0","0","0","0","1","0","0","0","0","0","0","0","0","height","received","width","0","Border","BorderPosition","Center","Draw","Ellipse","Inset","Outset","Paste","Rectangle","border","border","circle","color","draw","fill","fill","from_bounding_box","from_bounding_box","image","mask","new","new","new","new","overlay","overlay","overlay","position","position","position","position","radii","size","thickness","with_border","with_border","with_color","with_fill","with_fill","with_mask","with_mask_unchecked","with_overlay_mode","with_overlay_mode","with_overlay_mode","with_position","with_position","with_position","with_position","with_radii","with_size","with_size","with_thickness","Decoder","DynamicFrameIterator","Encoder","FrameIterator","Gif","Png","Sequence","Single","decode","decode_sequence","encode","encode_sequence","into_sequence","is_empty","len","loop_count","single","0","0","0","1","ColorType","Dynamic","L","LA","PaletteRgb","PaletteRgba","Rgb","Rgba","channels","gif","is_dynamic","is_paletted","jpeg","png","webp","GifDecoder","GifEncoder","GifFrameIterator","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","decode","decode_sequence","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","encode","encode_sequence","from","from","from","init","init","init","into","into","into","into_iter","len","loop_count","new","new","next","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_speed","with_speed_unchecked","JpegDecoder","JpegEncoder","borrow","borrow","borrow_mut","borrow_mut","decode","decode_sequence","deref","deref","deref_mut","deref_mut","drop","drop","encode","from","from","init","init","into","into","new","new","try_from","try_from","try_into","try_into","type_id","type_id","with_quality","with_quality_unchecked","Adaptive","AdaptiveFilterType","ApngFrameIterator","Avg","Best","Compression","Default","Fast","FilterType","Huffman","NoFilter","NonAdaptive","Paeth","PngDecoder","PngEncoder","Rle","Sub","Up","adaptive_filter","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","compression","decode","decode_sequence","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","encode","encode_sequence","eq","eq","filter","fmt","fmt","fmt","from","from","from","from","from","from","from_u8","init","init","init","init","init","init","into","into","into","into","into","into","into_iter","len","loop_count","new","new","next","size_hint","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","with_adaptive_filter","with_compression","with_filter","Lossless","Lossy","WebPEncoder","WebPQuality","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","default","deref","deref","deref_mut","deref_mut","drop","drop","encode","encode_sequence","fmt","from","from","init","init","into","into","quality","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","0","DecodingError","EmptyImageError","EncodingError","Error","FontError","IOError","IncompatibleImageData","InvalidExtension","InvalidHexCode","InvalidPaletteIndex","Result","UnknownEncodingFormat","UnsupportedColorType","0","0","0","0","0","0","height","received","width","0","0","Alpha","BIT_DEPTH","BitPixel","BitPixel","Bool","COLOR_TYPE","Color","Data","Dynamic","DynamicSubpixel","L","L","NoOp","NoOpSubpixel","Paletted","PalettedRgb","PalettedRgba","Pixel","Rgb","Rgb","Rgba","Rgba","Subpixel","TrueColor","U8","a","alpha","alpha","as_bytes","as_bytes","as_rgb_tuple","as_rgb_tuple","as_rgba_tuple","as_rgba_tuple","b","b","black","black","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","color","color_type","color_unchecked","default","deref","deref","deref_mut","deref_mut","drop","drop","eq","fmt","force_into_rgb","force_into_rgb","force_into_rgba","force_into_rgba","from","from","from_arbitrary_palette","from_bytes","from_bytes","from_dynamic","from_dynamic","from_hex","from_hex","from_palette","from_pixel","from_raw_parts","from_raw_parts_paletted","from_rgb","from_rgb_tuple","from_rgb_tuple","from_rgba_tuple","from_rgba_tuple","g","g","get_hash","hash","index","index","init","init","into","into","into_rgb","into_rgb","into_rgba","into_rgba","inverted","inverted","luminance","map_subpixels","map_subpixels","merge","merge_with_alpha","merge_with_alpha","new","new","new","new","off","on","overlay","overlay_with_alpha","palette","palette_index","r","r","to_owned","to_owned","transparent","try_from","try_from","try_into","try_into","type_id","type_id","value","value","white","white","with_alpha","with_alpha","0","0","0","0","0","0","Alpha","Banded","Bicubic","Bilinear","BitPixel","Bmp","Border","BorderPosition","Box","ColorType","DisposalMethod","Draw","Dynamic","DynamicFrameIterator","DynamicSubpixel","Ellipse","Font","Frame","FrameIterator","Gif","Hamming","HorizontalAnchor","Image","ImageFormat","ImageSequence","Jpeg","L","Lanczos3","LoopCount","Merge","Mitchell","Nearest","OverlayMode","Paletted","PalettedRgb","PalettedRgba","Paste","Pixel","Png","Rectangle","Replace","ResizeAlgorithm","Rgb","Rgba","TextLayout","TextSegment","Tiff","TrueColor","Unknown","VerticalAnchor","WebP","WrapStyle","bands","bands","bands","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","brighten","brightened","center","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","convert","crop","cropped","darken","darkened","data","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","dimensions","draw","drop","drop","drop","drop","encode","eq","eq","eq","flatten_palette","flip","flipped","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bands","from_bands","from_bands","from_bytes","from_bytes_inferred","from_extension","from_fn","from_mime_type","from_paletted_pixels","from_path","from_pixels","from_reader","from_reader_inferred","get_hash","get_pixel","hash","height","hue_rotate","hue_rotated","infer_encoding","init","init","init","init","into","into","into","into","invert","inverted","is_empty","is_unknown","len","map_data","map_in_place","map_palette","map_pixels","map_pixels_with_coords","map_rows","mask_alpha","mirror","mirrored","new","open","overlay_mode","overlay_pixel","overlay_pixel_with_mode","palette","palette_mut","palette_mut_unchecked","palette_unchecked","paste","paste_with_mask","pixel","pixel_mut","pixels","resize","resized","rotate","rotate_180","rotate_270","rotate_90","rotated","rows","run_decoder","run_encoder","run_sequence_decoder","run_sequence_encoder","save","save_inferred","set_data","set_format","set_pixel","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","width","with","with_overlay_mode","Background","DisposalMethod","Exactly","Frame","ImageSequence","Infinite","LoopCount","None","Previous","count_or_zero","delay","disposal","encode","extend_frames","first_frame","from_bytes","from_bytes_inferred","from_frames","from_image","from_reader","from_reader_inferred","image","image_mut","into_first_image","into_frames","into_image","is_empty","iter","iter_mut","len","loop_count","looped_exactly","looped_infinitely","map_image","new","open","push_frame","save","save_inferred","set_delay","set_disposal","set_loop_count","with_delay","with_disposal","with_frame","with_loop_count","0","Bottom","Center","Center","Character","Font","HorizontalAnchor","Left","None","Right","TextLayout","TextSegment","Top","VerticalAnchor","Word","WrapStyle","bounding_box","centered","dimensions","fill","font","from_bytes","from_reader","height","inner","into_inner","new","new","open","optimal_size","overlay","position","push_basic_text","push_segment","size","text","width","width","with_basic_text","with_horizontal_anchor","with_overlay_mode","with_position","with_position","with_segment","with_size","with_vertical_anchor","with_width","with_width","with_wrap","with_wrap","wrap"],"q":["rilril::Dynamic","","","","ril::DynamicFrameIterator","","","","ril::DynamicSubpixel","","ril::Error","","","","","","","","","ril::LoopCount","ril::draw","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ril::encode","","","","","","","","","","","","","","","","","ril::encode::DynamicFrameIterator","","","","ril::encodings","","","","","","","","","","","","","","","ril::encodings::gif","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ril::encodings::jpeg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ril::encodings::png","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ril::encodings::webp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ril::encodings::webp::WebPQuality","ril::error","","","","","","","","","","","","","ril::error::Error","","","","","","","","","ril::pixel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ril::pixel::Dynamic","","","","ril::pixel::DynamicSubpixel","","ril::preluderil::sequence","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ril::sequence::LoopCount","ril::text","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Whether the pixel is on.","The luminance value of the pixel, between 0 and 255.","Represents a pixel that supports alpha, or transparency â€¦","The bit depth of the pixel.","Dispose the current frame completely and replace it with â€¦","Represents an image with multiple channels, called bands.","A Catmull-Rom bicubic filter, which is the most common â€¦","A bilinear filter. Calculates output pixel value using â€¦","Represents a single-bit pixel that represents either a â€¦","","The image is encoded in the BMP format.","A boolean subpixel.","Represents a shape border.","Represents whether a border is inset, outset, or if it â€¦","The y position is the bottom edge of the text.","A box filter algorithm. Equivalent to the [<code>Nearest</code>] filter â€¦","The color type of the pixel.","A border that is balanced between the inside and outside â€¦","The x position is the center of the text. This also â€¦","The y position is the center of the text.","Keep as many characters per line as possible, and allow â€¦","The resolved color type of the palette. This is <code>Self</code> for â€¦","Represents an arbitrary color type. Note that this does â€¦","The iterator type this pixel uses.","Low-level decoder interface around an image format.","Invalid data was encountered when an image, usually â€¦","The method used to dispose a frame before transitioning to â€¦","A common trait for all objects able to be drawn on an â€¦","Represents a pixel type that is dynamically resolved.","Dynamic color type that can be used to store any color â€¦","Represents any one of the different types of frame â€¦","Represents a subpixel of a dynamic pixel.","An ellipse, which could be a circle.","Tried to encode an empty image, or an image without data.","Low-level encoder interface around an image format.","Failed to encode an image.","Represents an error that occurs within the crate.","Loops the specified amount of times.","Represents a single font along with its alternatives used â€¦","An error occured while trying to render or rasterize a â€¦","Represents a frame in an image sequence. It encloses an â€¦","Represents the lazy decoding of frames from an encoded â€¦","A GIF frame iterator.","The image is encoded in the GIF format.","While having similar performance as the [<code>Bilinear</code>] filter, â€¦","Represents where text is anchored horizontally.","An error occured when trying to read a file or when trying â€¦","A high-level image representation.","Represents the underlying encoding format of an image.","Represents a sequence of image frames such as an animated â€¦","An image received data incompatible with the imageâ€™s â€¦","Loops infinitely.","An inset border. May overlap the contents of inside the â€¦","An invalid extension was provided when trying to resolve â€¦","An invalid hex code was provided when trying to parse a â€¦","Received an invalid palette index.","The image is encoded in the JPEG format.","Represents an L, or luminance pixel that is stored as only â€¦","A single-channel pixel that holds one value, typically â€¦","","A two-channel <code>L</code> pixel that holds an additional alpha â€¦","A Lanczos filter with a window of 3. Calculates output â€¦","The x position is the left edge of the text. This is the â€¦","Determines how many times an image sequence should repeat â€¦","Merge the alpha values of overlay image with the alpha â€¦","A Mitchell-Netravali bicubic filter. Just like all cubic â€¦","A simple nearest neighbor algorithm. Although the fastest, â€¦","Do not dispose the current frame. Usually not desired for â€¦","Do not wrap the text.","An outset border. May overlap the contents of outside the â€¦","The behavior to use when overlaying images on top of each â€¦","A single-channel pixel that holds an index into a palette â€¦","A single-channel pixel that holds an index into a palette â€¦","A trait representing a paletted pixel. <code>Pixel::Subpixel</code> is â€¦","Represents a paletted pixel, holding an index to a palette â€¦","Represents a paletted pixel, holding an index to a palette â€¦","Pastes or overlays an image on top of another image.","Represents any type of pixel in an image.","A PNG or APNG frame iterator.","The image is encoded in the PNG format.","Dispose and replace the current frame with the previous â€¦","A rectangle.","Replace alpha values with the alpha values of the overlay â€¦","A filtering algorithm that is used to resize an image.","A shortcut type equivalent to <code>Result&lt;T, ril::Error&gt;</code>.","Represents an RGB pixel.","A three-channel pixel that holds red, green, and blue â€¦","","Represents an RGBA pixel.","A four-channel pixel that holds red, green, blue, and â€¦","","The x position is the right edge of the text. This also â€¦","The type of the iterator returned by <code>decode_sequence</code>.","A single static image frame.","The type of a single component in the pixel.","Represents a high-level text layout that can layout text â€¦","Represents a text segment that can be drawn.","The image is encoded in the TIFF format.","The y position is the top edge of the text. This is the â€¦","A trait representing all pixels that can be represented as â€¦","A u8 subpixel.","No known encoding is known for the image.","No encoding format could be inferred for the given image.","Received an unsupported color type when trying to create a â€¦","Represents where text is anchored vertically.","The image is encoded in the WebP format.","Keep words together and do not break in the middle of â€¦","Determines how text should be wrapped.","The alpha component of the pixel.","","","Returns the alpha, or opacity level of the pixel.","","","Turns this pixel into bytes.","","","","","","","","Returns the pixel as an (r, g, b) tuple.","","","","","","Returns the pixel as an (r, g, b, a) tuple.","","","","","","The blue component of the pixel.","The blue component of the pixel.","Takes this image and returns its bands.","The border data of the rectangle, or None if there is no â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Resolves the color of the pixel. Because invalid palette â€¦","The color of the border.","Resolves the color type of this pixel at runtime. This is â€¦","","Resolves the color of the pixel. Invalid palette values â€¦","A 1-dimensional vector of pixels representing all pixels â€¦","Decodes the given stream into an image.","Decodes the given stream into a frame iterator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encloses most drawing implementations and drawable objects.","Draws the object to the given image.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Houses Encoder, Decoder, and frame iterator traits.","Encodes the given image into the given writer.","Encodes the given image sequence into the given writer.","Contains encoder and decoder implementations for various â€¦","","","","","","","","","","","","","","","","Common error types.","The fill color of the rectangle, or None if there is no â€¦","","The fill color the text will be in.","","","","","","","","","","","","","","","","","","","","","The font to use to render the text.","Converts this pixel into RGB despite its type. This can â€¦","","","","","","","","Converts this pixel into RGBA despite its type. This can â€¦","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates this pixel from the given palette and index, but â€¦","Creates a new image from the given bands.","Creates this pixel from a raw bytes. This is used â€¦","","","","","","","","Creates this pixel from any dynamic pixel, dynamically at â€¦","","","","","","","","","","Creates this pixel from the given palette and index. For â€¦","","","Creates this pixel from the given color type, bit depth, â€¦","Creates this pixel from the given color type, bit depth, â€¦","","","","","","","","Creates a new pixel from an (r, g, b) tuple.","","","","","","Creates a new pixel from an (r, g, b, a) tuple.","","","","","","The green component of the pixel.","The green component of the pixel.","","","","","","","","","","","","","","","","","","","","","","","The image to paste, or the foreground image.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns the pixel casted into an Rgb pixel.","","","","","","Returns the pixel casted into an Rgba pixel.","","","","","","Collects all frames in this iterator and turns it into a â€¦","","Returns the inverted value of this pixel.","","","","","","","","Returns if there are no frames in the sequence. In this â€¦","Returns the number of frames in the sequence.","","Returns the amount of times this sequence will loop over â€¦","","The luminance of the pixel.","Maps the pixelâ€™s components and returns a new pixel with â€¦","","","","","","","","An image that masks or filters out pixels based on the â€¦","Merges this pixel with the given overlay pixel, taking â€¦","","Merges this pixel with the given overlay pixel, where the â€¦","","","","","","","","","","","Overlays this pixel with the given overlay pixel, abiding â€¦","The overlay mode of the rectangle, or None to inherit from â€¦","","The overlay mode of the image, or None to inherit from the â€¦","The overlay mode of the text. Note that anti-aliasing is â€¦","Overlays this pixel with the given overlay pixel, abiding â€¦","Returns the palette lookup as a slice.","","","Returns the index in the palette this pixel is of.","","","Encloses pixel-related traits and pixel type â€¦","The position of the border.","The position of the rectangle. The top-left corner of the â€¦","The center position of the ellipse. The center of this â€¦","The position of the image to paste.","The position the text will be rendered at. Ignored if this â€¦","The crate prelude exports. Importing this with a wildcard â€¦","The red component of the pixel.","The red component of the pixel.","The radii of the ellipse, in pixels; (horizontal, â€¦","","","","","","Implements the animated image and image sequence interface.","The dimensions of the rectangle, in pixels.","The size of the text in pixels.","","","","Implements the font/text rasterizing and layout interface.","The content of the text segment.","The thickness of the border, in pixels.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The width of the text box. If this is used in a <code>TextLayout</code>â€¦","Clones this pixel with the given alpha value.","","","The wrapping style of the text. Note that text will only â€¦","","","","","","","","","","","","","","","","","","","","","Represents a shape border.","Represents whether a border is inset, outset, or if it â€¦","A border that is balanced between the inside and outside â€¦","A common trait for all objects able to be drawn on an â€¦","An ellipse, which could be a circle.","An inset border. May overlap the contents of inside the â€¦","An outset border. May overlap the contents of outside the â€¦","Pastes or overlays an image on top of another image.","A rectangle.","The border data of the rectangle, or None if there is no â€¦","","Creates a new circle with the given center position and â€¦","The color of the border.","Draws the object to the given image.","The fill color of the rectangle, or None if there is no â€¦","","Creates a new rectangle from two coordinates specified as â€¦","Creates a new ellipse from the given bounding box.","The image to paste, or the foreground image.","An image that masks or filters out pixels based on the â€¦","todo!()","Creates a new rectangle with default values.","Creates a new ellipse.","Creates a new image paste with from the given image with â€¦","The overlay mode of the rectangle, or None to inherit from â€¦","","The overlay mode of the image, or None to inherit from the â€¦","The position of the border.","The position of the rectangle. The top-left corner of the â€¦","The center position of the ellipse. The center of this â€¦","The position of the image to paste.","The radii of the ellipse, in pixels; (horizontal, â€¦","The dimensions of the rectangle, in pixels.","The thickness of the border, in pixels.","Sets the border information of the rectangle.","Sets the border of the ellipse.","","Sets the fill color of the rectangle.","Sets the fill color of the ellipse.","Sets the mask image to use. Currently this is only limited â€¦","Sets the mask image to use. Currently this is only limited â€¦","Sets the overlay mode of the rectangle.","Sets the overlay mode of the ellipse.","Sets the overlay mode of the image.","","Sets the position of the rectangle.","Sets the position of the ellipse.","Sets the position of where to paste the image at. The â€¦","Sets the radii of the ellipse in pixels.","Sets the size of the rectangle in pixels.","Sets the diameters of the ellipse in pixels.","todo!()","Low-level decoder interface around an image format.","Represents any one of the different types of frame â€¦","Low-level encoder interface around an image format.","Represents the lazy decoding of frames from an encoded â€¦","A GIF frame iterator.","A PNG or APNG frame iterator.","The type of the iterator returned by <code>decode_sequence</code>.","A single static image frame.","Decodes the given stream into an image.","Decodes the given stream into a frame iterator.","Encodes the given image into the given writer.","Encodes the given image sequence into the given writer.","Collects all frames in this iterator and turns it into a â€¦","Returns if there are no frames in the sequence. In this â€¦","Returns the number of frames in the sequence.","Returns the amount of times this sequence will loop over â€¦","Create a new single static image frame iterator.","","","","","Represents an arbitrary color type. Note that this does â€¦","Dynamic color type that can be used to store any color â€¦","A single-channel pixel that holds one value, typically â€¦","A two-channel <code>L</code> pixel that holds an additional alpha â€¦","A single-channel pixel that holds an index into a palette â€¦","A single-channel pixel that holds an index into a palette â€¦","A three-channel pixel that holds red, green, and blue â€¦","A four-channel pixel that holds red, green, blue, and â€¦","Returns the number of channels in this color type.","","","","","","","A decoder for GIF images.","A GIF encoder interface over <code>gif::Encoder</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Creates a new encoder with default settings.","Creates a new decoder that decodes from the given reader.","","","","","","","","","","","Sets the speed of the encoder. Higher speeds come at the â€¦","Sets the speed of the encoder. Higher speeds come at the â€¦","A JPEG decoder interface over <code>jpeg_decoder::Decoder</code>.","A JPEG encoder interface over <code>jpeg_encoder::Encoder</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new encoder with default settings.","Creates a new decoder with the default settings.","","","","","","","Sets the quality of the encoded image. Must be between 0 â€¦","Sets the quality of the encoded image. Should be between 0 â€¦","","The filtering method for preprocessing scanline data â€¦","","","Higher compression level","The type and strength of applied compression.","Default level","Fast minimal compression","The byte level filter applied to scanlines to prepare them â€¦","","","","","A PNG decoder interface around <code>png::Decoder</code>.","A PNG encoder interface around <code>png::Encoder</code>.","","","","The adaptive filter type to use.","","","","","","","","","","","","","","","","","","","The compression to use.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The filter type to use.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","u8 -&gt; Self. Temporary solution until Rust provides a â€¦","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Creates a new encoder with the default settings.","Creates a new decoder with the default settings.","","","","","","","","","","","","","","","","","","","","","","","","Sets the adaptive filter type to use.","Sets the compression level to use.","Sets the filter type to use.","Lossless encoding.","Lossy encoding with the given quality factor. Larger â€¦","A WebP image encoder.","Represents the encoding quality of a WebP image.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Image quality to encode at.","","","","","","","","","Invalid data was encountered when an image, usually â€¦","Tried to encode an empty image, or an image without data.","Failed to encode an image.","Represents an error that occurs within the crate.","An error occured while trying to render or rasterize a â€¦","An error occured when trying to read a file or when trying â€¦","An image received data incompatible with the imageâ€™s â€¦","An invalid extension was provided when trying to resolve â€¦","An invalid hex code was provided when trying to parse a â€¦","Received an invalid palette index.","A shortcut type equivalent to <code>Result&lt;T, ril::Error&gt;</code>.","No encoding format could be inferred for the given image.","Received an unsupported color type when trying to create a â€¦","","","","","","","","","","Whether the pixel is on.","The luminance value of the pixel, between 0 and 255.","Represents a pixel that supports alpha, or transparency â€¦","The bit depth of the pixel.","Represents a single-bit pixel that represents either a â€¦","","A boolean subpixel.","The color type of the pixel.","The resolved color type of the palette. This is <code>Self</code> for â€¦","The iterator type this pixel uses.","Represents a pixel type that is dynamically resolved.","Represents a subpixel of a dynamic pixel.","Represents an L, or luminance pixel that is stored as only â€¦","","A pixel type that does and stores nothing. This pixel type â€¦","Extension of <code>NoOp</code>, used for internal purposes only. This â€¦","A trait representing a paletted pixel. <code>Pixel::Subpixel</code> is â€¦","Represents a paletted pixel, holding an index to a palette â€¦","Represents a paletted pixel, holding an index to a palette â€¦","Represents any type of pixel in an image.","Represents an RGB pixel.","","Represents an RGBA pixel.","","The type of a single component in the pixel.","A trait representing all pixels that can be represented as â€¦","A u8 subpixel.","The alpha component of the pixel.","Returns the alpha, or opacity level of the pixel.","","Turns this pixel into bytes.","","Returns the pixel as an (r, g, b) tuple.","","Returns the pixel as an (r, g, b, a) tuple.","","The blue component of the pixel.","The blue component of the pixel.","Creates a completely black pixel.","Creates an opaque black pixel.","","","","","","","","","Resolves the color of the pixel. Because invalid palette â€¦","Resolves the color type of this pixel at runtime. This is â€¦","Resolves the color of the pixel. Invalid palette values â€¦","","","","","","","","","","Converts this pixel into RGB despite its type. This can â€¦","","Converts this pixel into RGBA despite its type. This can â€¦","","Returns the argument unchanged.","Returns the argument unchanged.","Creates this pixel from the given palette and index, but â€¦","Creates this pixel from a raw bytes. This is used â€¦","","Creates this pixel from any dynamic pixel, dynamically at â€¦","","Parses an RGB pixel from a hex value.","Parses an RGBA pixel from a hex value.","Creates this pixel from the given palette and index. For â€¦","Creates a new dynamic pixelâ€¦dynamically, from a concrete â€¦","Creates this pixel from the given color type, bit depth, â€¦","Creates this pixel from the given color type, bit depth, â€¦","Creates an opaque pixel from an RGB pixel.","Creates a new pixel from an (r, g, b) tuple.","","Creates a new pixel from an (r, g, b, a) tuple.","","The green component of the pixel.","The green component of the pixel.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the pixel casted into an Rgb pixel.","","Returns the pixel casted into an Rgba pixel.","","Returns the inverted value of this pixel.","","The luminance of the pixel.","Maps the pixelâ€™s components and returns a new pixel with â€¦","","Merges this pixel with the given overlay pixel, taking â€¦","Merges this pixel with the given overlay pixel, where the â€¦","","Returns a new <code>BitPixel</code> with the given value.","Creates a new L pixel with the given luminance value.","Creates a new RGB pixel.","Creates a new RGBA pixel.","Returns a new <code>BitPixel</code> that is off.","Returns a new <code>BitPixel</code> that is on.","Overlays this pixel with the given overlay pixel, abiding â€¦","Overlays this pixel with the given overlay pixel, abiding â€¦","Returns the palette lookup as a slice.","Returns the index in the palette this pixel is of.","The red component of the pixel.","The red component of the pixel.","","","Creates a completely transparent pixel.","","","","","","","Returns the value of the pixel.","Returns the luminance value of the pixel.","Creates a completely white pixel.","Creates an opaque white pixel.","Clones this pixel with the given alpha value.","","","","","","","","","Represents an image with multiple channels, called bands.","A Catmull-Rom bicubic filter, which is the most common â€¦","A bilinear filter. Calculates output pixel value using â€¦","","The image is encoded in the BMP format.","","","A box filter algorithm. Equivalent to the [<code>Nearest</code>] filter â€¦","","","","","","","","","","","The image is encoded in the GIF format.","While having similar performance as the [<code>Bilinear</code>] filter, â€¦","","A high-level image representation.","Represents the underlying encoding format of an image.","","The image is encoded in the JPEG format.","","A Lanczos filter with a window of 3. Calculates output â€¦","","Merge the alpha values of overlay image with the alpha â€¦","A Mitchell-Netravali bicubic filter. Just like all cubic â€¦","A simple nearest neighbor algorithm. Although the fastest, â€¦","The behavior to use when overlaying images on top of each â€¦","","","","","","The image is encoded in the PNG format.","","Replace alpha values with the alpha values of the overlay â€¦","A filtering algorithm that is used to resize an image.","","","","","The image is encoded in the TIFF format.","","No known encoding is known for the image.","","The image is encoded in the WebP format.","","Takes this image and returns its bands.","","","","","","","","","","","Brightens the image by increasing all pixels by the â€¦","Takes this image and brightens it by increasing all pixels â€¦","Returns the nearest pixel coordinates to the center of the â€¦","","","","","","","","","Converts the image into an image with the given pixel type.","Crops this image in place to the given bounding box.","Takes this image and crops it to the given box. Useful for â€¦","Darkens the image by decreasing all pixels by the â€¦","Takes this image and darkens it by decreasing all pixels â€¦","A 1-dimensional vector of pixels representing all pixels â€¦","","","","","","","","","","","","Returns the dimensions of the image.","Draws an object or shape onto this image.","","","","","Encodes the image with the given encoding and writes it to â€¦","","","","Takes this image and flattens this paletted image into an â€¦","Flips this image vertically (about the x-axis) in place.","Takes this image and flips it vertically, or about the â€¦","","","","","","Returns the encoding format of the image. This is nothing â€¦","Returns the argument unchanged.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new image from the given bands.","","","Decodes an image with the explicitly given image encoding â€¦","Decodes an image from the given bytes, inferring its â€¦","Parses the given extension and returns the corresponding â€¦","Creates a new image with the given width and height. The â€¦","Returns the format specified by the given MIME type.","Creates a new image shaped with the given width and a â€¦","Returns the format specified by the given path.","Creates a new image shaped with the given width and a â€¦","Decodes an image with the explicitly given image encoding â€¦","Decodes an image from the given read stream of bytes, â€¦","","Returns a reference of the pixel at the given coordinates, â€¦","","Returns the height of the image.","Hue rotates the image by the specified amount of degrees â€¦","Takes this image and hue rotates it by the specified â€¦","Infers the encoding format from the given data via a byte â€¦","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Inverts this image in place.","Takes this image and inverts it. Useful for method â€¦","Returns true if the image contains no pixels.","Returns whether the extension is unknown.","Returns the amount of pixels in the image.","Returns the image replaced with the given data. It is up â€¦","Similar to [<code>map_pixels_with_coords</code>], but this maps the â€¦","Maps the palette of this image using the given function. â€¦","Returns the image with each pixel in the image mapped to â€¦","Returns the image with the each pixel in the image mapped â€¦","Returns the image with each row of pixels represented as a â€¦","Masks the alpha values of this image with the luminance â€¦","Mirrors, or flips this image horizontally (about the â€¦","Takes this image and flips it horizontally (about the â€¦","Creates a new image with the given width and height, with â€¦","Opens a file from the given path and decodes it into an â€¦","Returns the overlay mode of the image.","Overlays the pixel at the given coordinates with the given â€¦","Overlays the pixel at the given coordinates with the given â€¦","Returns the palette associated with this image as a slice. â€¦","Returns the palette associated with this image as a â€¦","Returns the palette associated with this image as a â€¦","Returns the palette associated with this image as a slice. â€¦","Pastes the given image onto this image at the given x and â€¦","Pastes the given image onto this image at the given x and â€¦","Returns a reference of the pixel at the given coordinates.","Returns a mutable reference to the pixel at the given â€¦","Returns an iterator of slices representing the pixels of â€¦","Resizes this image in place to the given dimensions using â€¦","Takes this image and resizes this image to the given â€¦","Rotates this image in place about its center. There are â€¦","Rotates this image by 180 degrees in place.","Rotates this image by 270 degrees clockwise, or 90 degrees â€¦","Rotates this image by 90 degrees clockwise, or 270 degrees â€¦","Takes the image and rotates it by the specified amount of â€¦","Iterates over each row of pixels in the image.","Decodes the image data from into an image.","Encodes the <code>Image</code> into raw bytes.","Decodes the image sequence data into an image sequence.","Encodes the <code>ImageSequence</code> into raw bytes. If the encoding â€¦","Saves the image with the given encoding to the given path. â€¦","Saves the image to the given path, inferring the encoding â€¦","Sets the data of this image to the new data. This is used â€¦","Sets the encoding format of this image. Note that when â€¦","Sets the pixel at the given coordinates to the given pixel.","","","","","","","","","","","","","","","","","","","Returns the width of the image.","Takes this image, draws the given object or shape onto it, â€¦","Returns the same image with its overlay mode set to the â€¦","Dispose the current frame completely and replace it with â€¦","The method used to dispose a frame before transitioning to â€¦","Loops the specified amount of times.","Represents a frame in an image sequence. It encloses an â€¦","Represents a sequence of image frames such as an animated â€¦","Loops infinitely.","Determines how many times an image sequence should repeat â€¦","Do not dispose the current frame. Usually not desired for â€¦","Dispose and replace the current frame with the previous â€¦","Returns the exact number of times this loop should be â€¦","Returns the delay duration for this frame.","Returns the disposal method for this frame.","Encodes this image sequence with the given encoding and â€¦","Extends frames from the given iterator.","Returns a reference to the first frame in the image â€¦","Decodes an image sequence with the explicitly given image â€¦","Decodes an image sequence from the given byte slice, â€¦","Creates a new image sequence from the given frames.","Creates a new frame with the given image and default â€¦","Decodes the image sequence with the explicitly given image â€¦","Decodes an image sequence from the given read stream of â€¦","Returns a reference to the image this frame contains.","Returns a mutable reference to the image this frame â€¦","Consumes this image sequence and returns the first image.","Consumes this image sequence and returns the frames it â€¦","Consumes this frame returning the inner image it â€¦","Returns whether there are no frames in the image sequence. â€¦","Iterates through the frames in this image sequence by â€¦","Iterates through the frames in this image sequence by â€¦","Returns the number of frames in this image sequence.","Returns how many times this image sequence loops for.","Sets the exact number of loops this image sequence loops â€¦","Sets the image sequence to loop infinitely.","Maps the inner image to the given function.","Creates a new image sequence with no frames.","Opens a file from the given path and decodes it, returning â€¦","Adds a new frame to this image sequence.","Saves the image sequence with the given encoding to the â€¦","Saves the image sequence to the given path, inferring the â€¦","Sets the frame delay to the given duration in place.","Sets the disposal method for this frame in place.","Sets how many times this image sequence loops for in place.","Takes this frame and sets the frame delay to the given â€¦","Takes this frame and sets the disposal method for this â€¦","Adds a new frame to this image sequence and returns this â€¦","Takes this image and sets how many times this image â€¦","","The y position is the bottom edge of the text.","The x position is the center of the text. This also â€¦","The y position is the center of the text.","Keep as many characters per line as possible, and allow â€¦","Represents a single font along with its alternatives used â€¦","Represents where text is anchored horizontally.","The x position is the left edge of the text. This is the â€¦","Do not wrap the text.","The x position is the right edge of the text. This also â€¦","Represents a high-level text layout that can layout text â€¦","Represents a text segment that can be drawn.","The y position is the top edge of the text. This is the â€¦","Represents where text is anchored vertically.","Keep words together and do not break in the middle of â€¦","Determines how text should be wrapped.","Returns the bounding box of the text. Left and top bounds â€¦","Sets the horizontal anchor and vertial anchor of the text â€¦","Returns the width and height of the text. This is a â€¦","The fill color the text will be in.","The font to use to render the text.","Loads the font from the given byte slice. Useful for the â€¦","Loads the font from the given byte reader. See [<code>from_bytes</code>]â€¦","Returns the height of the text. This is a slightly â€¦","Returns a reference the <code>fontdue::Font</code> object associated â€¦","Consumes this font and returns the <code>fontdue::Font</code> object â€¦","Creates a new text layout with default settings.","Creates a new text segment with the given text, font, and â€¦","Opens the font from the given path.","Returns the optimal size, in pixels, of this font.","The overlay mode of the text. Note that anti-aliasing is â€¦","The position the text will be rendered at. Ignored if this â€¦","Adds basic text to the text layout. This is a convenience â€¦","Adds a text segment to the text layout.","The size of the text in pixels.","The content of the text segment.","Returns the width of the text. This is a slightly â€¦","The width of the text box. If this is used in a <code>TextLayout</code>â€¦","Takes this text layout and returns it with the given basic â€¦","Sets the horizontal anchor of the text. The horizontal â€¦","Sets the overlay mode of the text segment.","Sets the position of the text layout.","Sets the position of the text segment. Ignored if this â€¦","Takes this text layout and returns it with the given text â€¦","Sets the size of the text segment.","Sets the vertical anchor of the text. The vertical anchor â€¦","Sets the wrapping width of the text. This does not impact â€¦","Sets the width of the text segment, used for text wrapping.","Sets the wrapping style of the text. Make sure to also set â€¦","Sets the wrapping style of the text segment. If this is â€¦","The wrapping style of the text. Note that text will only â€¦"],"i":[5,6,0,12,18,0,74,74,0,4,73,1,0,0,26,74,12,10,25,26,23,12,0,12,0,37,0,0,0,17,0,0,0,37,0,37,0,20,0,37,0,0,49,73,74,0,37,0,0,0,37,20,10,37,37,37,73,0,17,4,17,74,25,0,51,74,74,18,23,10,0,17,17,0,0,0,0,0,49,73,18,0,51,0,0,0,17,4,0,17,4,25,89,49,12,0,0,73,26,0,1,73,37,37,0,73,23,0,3,1,1,90,3,4,12,5,6,7,3,4,8,9,91,5,6,7,3,4,91,5,6,7,3,4,7,3,92,14,15,49,29,10,13,14,15,16,17,37,5,6,7,3,1,4,8,9,18,19,20,21,22,23,24,25,26,49,29,10,13,14,15,16,17,37,5,6,7,3,1,4,8,9,18,19,20,21,22,23,24,25,26,10,13,14,15,16,17,5,6,7,3,1,4,8,9,18,19,20,21,22,23,24,25,26,10,13,14,15,16,17,5,6,7,3,1,4,8,9,18,19,20,21,22,23,24,25,26,93,13,12,4,93,27,89,89,29,10,13,14,15,5,6,7,3,4,8,9,18,20,21,23,25,26,49,29,10,13,14,15,16,17,37,5,6,7,3,1,4,8,9,18,19,19,20,21,22,23,24,25,26,49,29,10,13,14,15,16,17,37,5,6,7,3,1,4,8,9,18,19,19,20,21,22,23,24,25,26,1,1,0,94,29,14,15,16,24,49,29,10,13,14,15,16,17,37,5,6,7,3,1,4,8,9,18,19,20,21,22,23,24,25,26,0,95,95,0,10,17,5,6,7,3,1,4,8,9,18,20,23,25,26,0,14,15,24,10,13,14,15,17,37,37,5,6,7,3,1,4,8,9,18,20,23,25,26,24,12,5,6,7,3,4,8,9,12,5,6,7,3,4,8,9,49,29,10,13,14,15,16,17,17,37,37,37,37,37,37,37,37,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,3,3,3,3,3,3,3,1,4,4,4,4,4,4,4,8,9,18,19,19,20,21,22,23,24,25,26,12,92,12,5,6,7,3,4,8,9,12,5,6,7,3,4,8,9,21,21,93,8,9,12,12,5,6,7,3,4,8,9,91,5,6,7,3,4,91,5,6,7,3,4,7,3,10,17,5,6,7,3,4,8,9,18,20,10,17,5,6,7,3,4,8,9,18,20,16,8,9,49,29,10,13,14,15,16,17,37,5,6,7,3,1,4,8,9,18,19,20,21,22,23,24,25,26,49,29,10,13,14,15,16,17,37,5,6,7,3,1,4,8,9,18,19,20,21,22,23,24,25,26,49,21,91,5,6,7,3,4,91,5,6,7,3,4,96,49,12,5,6,7,3,4,8,9,96,96,49,96,49,12,12,5,6,7,3,4,8,9,16,12,3,12,5,6,7,3,4,8,9,1,1,49,12,14,15,16,24,12,93,8,9,93,8,9,0,13,14,15,16,24,0,7,3,15,1,1,1,1,1,0,14,24,49,1,1,0,24,13,10,13,14,15,16,17,5,6,7,3,1,4,8,9,18,19,20,21,22,23,24,25,26,37,49,29,10,13,14,15,16,17,37,5,6,7,3,1,4,8,9,18,19,20,21,22,23,24,25,26,49,29,10,13,14,15,16,17,37,5,6,7,3,1,4,8,9,18,19,20,21,22,23,24,25,26,49,29,10,13,14,15,16,17,37,5,6,7,3,1,4,8,9,18,19,20,21,22,23,24,25,26,24,90,3,4,24,97,98,99,100,101,102,103,101,104,105,106,107,108,109,110,111,112,112,112,113,0,0,10,0,0,10,10,0,0,14,15,15,13,94,14,15,14,15,16,16,13,14,15,16,14,15,16,13,14,15,16,15,14,13,14,15,13,14,15,16,16,14,15,16,13,14,15,16,15,14,15,13,0,0,0,0,49,49,89,49,89,89,95,95,96,96,96,96,49,101,102,103,101,0,17,17,17,17,17,17,17,17,0,17,17,0,0,0,0,0,0,56,55,57,56,55,57,55,55,56,55,56,55,57,56,55,57,56,55,57,56,56,56,55,57,56,55,57,56,55,57,57,57,57,56,55,57,56,55,57,56,55,57,56,55,57,56,56,0,0,59,58,59,58,58,58,59,58,59,58,59,58,59,59,58,59,58,59,58,59,58,59,58,59,58,59,58,59,59,62,0,0,61,60,0,60,60,0,60,61,62,61,0,0,60,61,61,64,64,63,66,60,61,62,64,63,66,60,61,62,60,61,62,60,61,62,64,63,63,64,63,60,61,62,64,63,66,60,61,62,64,63,66,60,61,62,64,63,66,60,61,62,64,64,61,62,64,60,61,62,64,63,66,60,61,62,61,64,63,66,60,61,62,64,63,66,60,61,62,66,66,66,64,63,66,66,60,61,62,64,63,66,60,61,62,64,63,66,60,61,62,64,63,66,60,61,62,64,64,64,67,67,0,0,67,68,67,68,67,67,67,68,67,68,67,68,67,68,68,68,67,67,68,67,68,67,68,68,67,67,68,67,68,67,68,114,37,37,37,0,37,37,37,37,37,37,0,37,37,106,107,108,109,110,111,112,112,112,5,6,0,12,0,4,1,12,12,12,0,0,0,4,0,0,0,0,0,0,0,4,0,4,12,0,1,3,90,69,12,69,91,69,91,69,7,3,7,3,69,70,69,70,69,70,69,70,93,12,93,69,69,70,69,70,69,70,69,69,12,69,12,69,69,70,12,12,69,12,69,7,3,93,4,12,12,3,91,69,91,69,7,3,69,69,8,9,69,70,69,70,91,69,91,69,12,69,12,12,69,12,12,69,5,6,7,3,5,5,12,12,93,93,7,3,69,70,3,69,70,69,70,69,70,5,6,7,3,90,69,97,98,99,100,104,105,0,0,74,74,0,73,0,0,74,0,0,0,0,0,0,0,0,0,0,73,74,0,0,0,0,73,0,74,0,51,74,74,0,0,0,0,0,0,73,0,51,0,0,0,0,0,73,0,73,0,73,0,92,27,27,51,27,73,74,51,27,73,74,27,27,27,51,27,73,74,51,27,73,74,27,27,27,27,27,27,51,73,74,51,27,73,74,51,27,73,74,27,27,51,27,73,74,27,51,73,74,27,27,27,51,51,73,73,74,27,51,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,73,74,92,27,27,27,27,73,27,73,27,73,27,27,27,73,27,73,27,27,27,73,51,27,73,74,51,27,73,74,27,27,27,73,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,73,73,73,73,27,27,27,27,27,51,27,73,74,51,73,51,27,73,74,51,27,73,74,51,27,73,74,27,27,27,18,0,20,0,0,20,0,18,18,20,19,19,21,21,21,21,21,21,19,21,21,19,19,21,21,19,21,21,21,21,21,21,21,19,21,21,21,21,21,19,19,21,19,19,21,21,113,26,25,26,23,0,0,25,23,25,0,0,26,0,23,0,29,29,29,24,24,22,22,29,22,22,29,24,22,22,24,24,29,29,24,24,29,24,29,29,24,29,24,29,24,29,29,24,29,24,24],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1],1],[[1,1]],[[],2],[3,2],[4,2],[[]],[5],[6],[7],[3],[4],[8],[9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[10,10],[[[13,[[0,[11,12]]]]],[[13,[[0,[11,12]]]]]],[[[14,[[0,[11,12]]]]],[[14,[[0,[11,12]]]]]],[[[15,[[0,[11,12]]]]],[[15,[[0,[11,12]]]]]],[[[16,[[0,[11,12]]]]],[[16,[[0,[11,12]]]]]],[17,17],[5,5],[6,6],[7,7],[3,3],[1,1],[4,4],[8,8],[9,9],[18,18],[[[19,[[0,[11,12]]]]],[[19,[[0,[11,12]]]]]],[20,20],[[[21,[[0,[11,12]]]]],[[21,[[0,[11,12]]]]]],[22,22],[23,23],[[[24,[[0,[11,12]]]]],[[24,[[0,[11,12]]]]]],[25,25],[26,26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],17],[4,17],[[]],0,[[],[[28,[27]]]],[[],28],[[],[[29,[12]]]],[[],10],[[],[[13,[[0,[30,12]]]]]],[[],[[14,[[0,[30,12]]]]]],[[],[[15,[[0,[30,12]]]]]],[[],5],[[],6],[[],7],[[],3],[[],4],[[],8],[[],9],[[],18],[[],20],[[],[[21,[[0,[30,12]]]]]],[[],23],[[],25],[[],26],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[[[19,[12]]]],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[[[19,[12]]]],[31],[31],[31],[31],[31],[31],[31],[[1,1],1],[[1,1]],0,[32],[[[29,[12]],32]],[[[14,[12]],32]],[[[15,[12]],32]],[[[16,[12]],32]],[[[24,[12]],32]],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],0,[27,28],[21,28],0,[[10,10],33],[[17,17],33],[[5,5],33],[[6,6],33],[[7,7],33],[[3,3],33],[[1,1],33],[[4,4],33],[[8,8],33],[[9,9],33],[[18,18],33],[[20,20],33],[[23,23],33],[[25,25],33],[[26,26],33],0,0,0,0,[[10,34],35],[[[13,[[0,[36,12]]]],34],35],[[[14,[[0,[36,12]]]],34],35],[[[15,[[0,[36,12]]]],34],35],[[17,34],35],[[37,34],35],[[37,34],35],[[5,34],35],[[6,34],35],[[7,34],35],[[3,34],35],[[1,34],35],[[4,34],35],[[8,34],35],[[9,34],35],[[18,34],35],[[20,34],35],[[23,34],35],[[25,34],35],[[26,34],35],0,[[],7],[5,7],[6,7],[7,7],[3,7],[4,7],[8,7],[9,7],[[],3],[5,3],[6,3],[7,3],[3,3],[4,3],[8,3],[9,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[38,17],[[]],[39,37],[40,37],[41,37],[42,37],[43,37],[[]],[44,37],[45,37],[8,5],[9,5],[4,5],[6,5],[3,5],[[]],[7,5],[9,6],[7,6],[4,6],[[]],[3,6],[8,6],[5,6],[4,7],[6,7],[3,7],[9,7],[5,7],[8,7],[[]],[8,3],[6,3],[5,3],[4,3],[9,3],[[]],[7,3],[[]],[3,4],[7,4],[8,4],[9,4],[6,4],[[]],[5,4],[[]],[[]],[[]],[[[27,[12]]],[[19,[12]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[31,28],[[]],[[]],[[],5],[[],6],[[],7],[[],3],[[],4],[[],8],[[],9],[4],[4,5],[4,6],[4,7],[4,3],[4,4],[4,8],[4,9],[[],[[21,[12]]]],[[],[[21,[12]]]],[[]],[[],8],[[],9],[[17,2],28],[[17,2,46],28],[[17,2,46],[[28,[5]]]],[[17,2,46],[[28,[6]]]],[[17,2,46],[[28,[7]]]],[[17,2,46],[[28,[3]]]],[[17,2,46],[[28,[4]]]],[[17,2,46],[[28,[8]]]],[[17,2,46],[[28,[9]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[10],[17],[5],[6],[7],[3],[4],[8],[9],[18],[20],0,0,0,[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[21,[12]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],[[28,[21]]]],[[[49,[12,48]]],[[28,[[21,[12]]]]]],[[]],[5,5],[6,6],[7,7],[3,3],[4,4],[8,8],[9,9],[[],33],[[],50],[[[49,[12,48]]],50],[[],20],[[[49,[12,48]]],20],[[],2],[[]],[5,5],[6,6],[7,7],[3,3],[4,4],[8,8],[9,9],0,[[]],[[3,3],3],[2],[[5,5,2],5],[[6,6,2],6],[[7,7,2],7],[[3,3,2],3],[[4,4,2],4],[[8,8,2],8],[[9,9,2],9],[[1,1],1],[[1,1]],[[[49,[12,48]]],46],[51],0,0,0,0,[[51,2]],[[]],[8],[9],[[]],[8,2],[9,2],0,0,0,0,0,0,0,0,0,0,[[1,1],1],[[1,1]],[[1,1],1],[[1,1],1],[[1,1],1],0,0,0,[[[49,[12,48]]]],[[1,1],1],[[1,1]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],52],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],0,[2],[[3,2],3],[[4,2],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[50,50,50],[[15,[12]]]],0,[32],0,0,[[50,50,50,50],[[14,[12]]]],[[50,50,50,50],[[15,[12]]]],0,0,[[12,50],[[13,[12]]]],[[],[[14,[12]]]],[[],[[15,[12]]]],[[[27,[12]]],[[16,[12]]]],0,0,0,0,0,0,0,0,0,0,[[[14,[12]],[13,[12]]],[[14,[12]]]],[[[15,[12]],[13,[12]]],[[15,[12]]]],[[[13,[12]],12],[[13,[12]]]],[[[14,[12]],12],[[14,[12]]]],[[[15,[12]],12],[[15,[12]]]],[[[16,[12]],[27,[5]]],[[16,[12]]]],[[[16,[12]],[27,[5]]],[[16,[12]]]],[[[14,[12]],51],[[14,[12]]]],[[[15,[12]],51],[[15,[12]]]],[[[16,[12]],51],[[16,[12]]]],[[[13,[12]],10],[[13,[12]]]],[[[14,[12]],50,50],[[14,[12]]]],[[[15,[12]],50,50],[[15,[12]]]],[[[16,[12]],50,50],[[16,[12]]]],[[[15,[12]],50,50],[[15,[12]]]],[[[14,[12]],50,50],[[14,[12]]]],[[[15,[12]],50,50],[[15,[12]]]],[[[13,[12]],50],[[13,[12]]]],0,0,0,0,0,0,0,0,[[],[[28,[27]]]],[[],28],[27,28],[21,28],[[],[[28,[21]]]],[[],33],[[],50],[[],20],[[[27,[12]]],[[49,[12,48]]]],0,0,0,0,0,0,0,0,0,0,0,0,[17,31],0,[17,33],[17,33],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[55,[12,48]],48],[[28,[[27,[12]]]]]],[[[55,[12,48]],48],28],[[],56],[[],[[55,[12,48]]]],[31],[31],[31],[31],[31],[31],[31],[31],[31],[[56,27],28],[[56,21],28],[[]],[[]],[[]],[[],31],[[],31],[[],31],[[]],[[]],[[]],[[]],[[[57,[12,48]]],50],[[[57,[12,48]]],20],[[],56],[[],[[55,[12,48]]]],[[[57,[12,48]]],46],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],54],[[],54],[[],54],[[56,2],56],[[56,2],56],0,0,[[]],[[]],[[]],[[]],[[[58,[12,48]],48],[[28,[[27,[12]]]]]],[[[58,[12,48]],48],28],[31],[31],[31],[31],[31],[31],[[59,27],28],[[]],[[]],[[],31],[[],31],[[]],[[]],[[],59],[[],[[58,[12,48]]]],[[],53],[[],53],[[],53],[[],53],[[],54],[[],54],[[59,2],59],[[59,2],59],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[60,60],[61,61],[62,62],[[]],[[]],[[]],0,[[[63,[12,48]],48],[[28,[[27,[12]]]]]],[[[63,[12,48]],48],28],[[],64],[[],[[63,[12,48]]]],[[],60],[[],61],[[],62],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[31],[[64,27],28],[[64,21],28],[[61,61],33],[[62,62],33],0,[[60,34],[[53,[65]]]],[[61,34],[[53,[65]]]],[[62,34],[[53,[65]]]],[[]],[[]],[[]],[[]],[[]],[[]],[2,[[46,[61]]]],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[66,[12,48]]],50],[[[66,[12,48]]],20],[[],64],[[],[[63,[12,48]]]],[[[66,[12,48]]],46],[[[66,[12,48]]]],[[]],[[]],[[]],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[64,62],64],[[64,60],64],[[64,61],64],0,0,0,0,[[]],[[]],[[]],[[]],[67,67],[[]],[[],67],[[],68],[31],[31],[31],[31],[31],[31],[[68,27],28],[[68,21],28],[[67,34],35],[[]],[[]],[[],31],[[],31],[[]],[[]],0,[[]],[[],53],[[],53],[[],53],[[],53],[[],54],[[],54],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],2],[69,2],[[]],[69],[[]],[69],[[]],[69],0,0,[[],7],[[],3],[[]],[[]],[[]],[[]],[69,69],[70,70],[[]],[[]],[[]],[[],17],[[]],[[],69],[31],[31],[31],[31],[31],[31],[[69,69],33],[[69,34],35],[[],7],[69,7],[[],3],[69,3],[[]],[[]],[31,28],[[]],[[],69],[4],[4,69],[[[72,[71]]],[[28,[7]]]],[71,[[28,[3]]]],[[]],[12,[[28,[4]]]],[[17,2],28],[[17,2,46],28],[7,3],[[]],[[],69],[[]],[[],69],0,0,[[],47],[69],0,0,[[],31],[[],31],[[]],[[]],[[],7],[69,7],[[],3],[69,3],[[]],[69,69],[[],2],[[]],[69,69],[[]],[2],[[69,69,2],69],[33,5],[2,6],[[2,2,2],7],[[2,2,2,2],3],[[],5],[[],5],[51],[[51,2]],[[]],[[]],0,0,[[]],[[]],[[],3],[[],53],[[],53],[[],53],[[],53],[[],54],[[],54],[5,33],[6,2],[[],7],[[],3],[2],[[69,2],69],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[[27,[7]]]],[[[27,[3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[27,[12]]]],[[[27,[12]]],[[27,[12]]]],[[[27,[12]]]],[51,51],[[[27,[[0,[11,12]]]]],[[27,[[0,[11,12]]]]]],[73,73],[74,74],[[]],[[]],[[]],[[]],[[[27,[12]]],[[27,[[0,[12,[75,[12]]]]]]]],[[[27,[12]],50,50,50,50]],[[[27,[12]],50,50,50,50],[[27,[12]]]],[[[27,[12]]]],[[[27,[12]]],[[27,[12]]]],0,[[],51],[[],73],[[],74],[31],[31],[31],[31],[31],[31],[31],[31],[[[27,[12]]]],[[[27,[12]]]],[31],[31],[31],[31],[[[27,[12]],73],28],[[51,51],33],[[73,73],33],[[74,74],33],[[[27,[12]]],27],[[[27,[12]]]],[[[27,[12]]],[[27,[12]]]],[[51,34],35],[[51,34],35],[[73,34],35],[[73,34],35],[[74,34],35],[[[27,[12]]],73],[[]],[[[27,[9]]],[[27,[4]]]],[[[27,[6]]],[[27,[3]]]],[[[27,[8]]],[[27,[4]]]],[[[27,[3]]],[[27,[4]]]],[[[19,[12]]],[[27,[12]]]],[[[27,[7]]],[[27,[4]]]],[[[27,[6]]],[[27,[4]]]],[[[27,[5]]],[[27,[4]]]],[[[27,[9]]],[[27,[3]]]],[[[27,[8]]],[[27,[3]]]],[[[27,[4]]],[[27,[3]]]],[[[27,[7]]],[[27,[3]]]],[[[27,[5]]],[[27,[3]]]],[[[27,[9]]],[[27,[7]]]],[[]],[[[27,[8]]],[[27,[7]]]],[[[27,[4]]],[[27,[7]]]],[[[27,[3]]],[[27,[7]]]],[[[27,[6]]],[[27,[7]]]],[[[27,[5]]],[[27,[7]]]],[[[27,[8]]],[[27,[9]]]],[[[27,[9]]],[[27,[6]]]],[[[27,[8]]],[[27,[6]]]],[[[27,[4]]],[[27,[6]]]],[[[27,[3]]],[[27,[6]]]],[[[27,[7]]],[[27,[6]]]],[[[27,[5]]],[[27,[6]]]],[[[27,[9]]],[[27,[5]]]],[[[27,[8]]],[[27,[5]]]],[[[27,[9]]],[[27,[8]]]],[[[27,[6]]],[[27,[5]]]],[[[27,[7]]],[[27,[5]]]],[[[27,[3]]],[[27,[5]]]],[[[27,[4]]],[[27,[5]]]],[[]],[[]],[[]],[[],[[27,[3]]]],[[],[[27,[7]]]],[[73,72],[[28,[[27,[12]]]]]],[72,[[28,[[27,[12]]]]]],[[[72,[76]]],[[28,[73]]]],[[50,50,77],[[27,[12]]]],[[[72,[71]]],73],[[50,78,72],[[27,[12]]]],[[[72,[79]]],[[28,[73]]]],[[50,72],[[27,[12]]]],[[73,48],[[28,[[27,[12]]]]]],[48,[[28,[[27,[12]]]]]],[[],47],[[[27,[12]],50,50],46],[73],[[[27,[12]]],50],[[[27,[12]],80]],[[[27,[12]],80],[[27,[12]]]],[[],73],[[],31],[[],31],[[],31],[[],31],[[]],[[]],[[]],[[]],[[[27,[12]]]],[[[27,[12]]],[[27,[12]]]],[[[27,[12]]],33],[73,33],[[[27,[12]]],50],[[[27,[12]],81],[[27,[12]]]],[[[27,[12]],77]],[[[27,[12]]],27],[[[27,[12]],77],[[27,[12]]]],[[[27,[12]],77],[[27,[12]]]],[[[27,[12]],77],[[27,[12]]]],[[[27,[12]],27]],[[[27,[12]]]],[[[27,[12]]],[[27,[12]]]],[[50,50,12],[[27,[12]]]],[[[72,[79]]],[[28,[[27,[12]]]]]],[[[27,[12]]],51],[[[27,[12]],50,50,12]],[[[27,[12]],50,50,12,51]],[[[27,[12]]],46],[[[27,[12]]],46],[[[27,[12]]]],[[[27,[12]]]],[[[27,[12]],50,50,[27,[12]]]],[[[27,[12]],50,50,[27,[12]],[27,[5]]]],[[[27,[12]],50,50]],[[[27,[12]],50,50]],[[[27,[12]]],82],[[[27,[12]],50,50,74]],[[[27,[12]],50,50,74],[[27,[12]]]],[[[27,[12]],80]],[[[27,[12]]]],[[[27,[12]]]],[[[27,[12]]]],[[[27,[12]],80],[[27,[12]]]],[[[27,[12]]],82],[[73,48],[[28,[[27,[12]]]]]],[[73,27],28],[[73,48],[[28,[[49,[12,48]]]]]],[[73,21],28],[[[27,[12]],73,[72,[79]]],28],[[[27,[12]],[72,[79]]],28],[[[27,[12]],[83,[12]]]],[[[27,[12]],73]],[[[27,[12]],50,50,12]],[[]],[[]],[[]],[[]],[[],52],[[],52],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],54],[[],54],[[],54],[[],54],[[[27,[12]]],50],[[[27,[12]]],[[27,[12]]]],[[[27,[12]],51],[[27,[12]]]],0,0,0,0,0,0,0,0,0,[20,50],[[[19,[12]]],84],[[[19,[12]]],18],[[[21,[12]],73],28],[[[21,[12]]]],[[[21,[12]]],19],[73,[[28,[[49,[12]]]]]],[[],[[28,[[49,[12]]]]]],[[[83,[[19,[12]]]]],[[21,[12]]]],[[[27,[12]]],[[19,[12]]]],[[73,48],[[28,[[49,[12,48]]]]]],[[[0,[48,85]]],[[28,[[49,[12,[0,[48,85]]]]]]]],[[[19,[12]]],27],[[[19,[12]]],27],[[[21,[12]]],[[27,[12]]]],[[[21,[12]]],[[83,[[19,[12]]]]]],[[[19,[12]]],[[27,[12]]]],[[[21,[12]]],33],[[[21,[12]]],82],[[[21,[12]]],82],[[[21,[12]]],31],[[[21,[12]]],20],[[[21,[12]],50],[[21,[12]]]],[[[21,[12]]],[[21,[12]]]],[[[19,[12]],81],[[19,[12]]]],[[],[[21,[12]]]],[[[72,[79]]],[[28,[[49,[12,86]]]]]],[[[21,[12]],[19,[12]]]],[[[21,[12]],73,[72,[79]]],28],[[[21,[12]],[72,[79]]],28],[[[19,[12]],84]],[[[19,[12]],18]],[[[21,[12]],20]],[[[19,[12]],84],[[19,[12]]]],[[[19,[12]],18],[[19,[12]]]],[[[21,[12]],[19,[12]]],[[21,[12]]]],[[[21,[12]],20],[[21,[12]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[29,[12]]]],[[[29,[12]]],[[29,[12]]]],[[[29,[12]]]],0,0,[87,[[28,[22]]]],[[48,87],[[28,[22]]]],[[[29,[12]]],50],[22,88],[22,88],[[],[[29,[12]]]],[[22,[72,[71]],12],[[24,[12]]]],[[[72,[79]],87],[[28,[22]]]],[22,87],0,0,[[[29,[12]],22,[72,[71]],12]],[[[29,[12]],24]],0,0,[[[29,[12]]],50],0,[[[29,[12]],22,[72,[71]],12],[[29,[12]]]],[[[29,[12]],25],[[29,[12]]]],[[[24,[12]],51],[[24,[12]]]],[[[29,[12]],50,50],[[29,[12]]]],[[[24,[12]],50,50],[[24,[12]]]],[[[29,[12]],24],[[29,[12]]]],[[[24,[12]],87],[[24,[12]]]],[[[29,[12]],26],[[29,[12]]]],[[[29,[12]],50],[[29,[12]]]],[[[24,[12]],50],[[24,[12]]]],[[[29,[12]],23],[[29,[12]]]],[[[24,[12]],23],[[24,[12]]]],0],"p":[[4,"DynamicSubpixel"],[15,"u8"],[3,"Rgba"],[4,"Dynamic"],[3,"BitPixel"],[3,"L"],[3,"Rgb"],[3,"PalettedRgb"],[3,"PalettedRgba"],[4,"BorderPosition"],[8,"Clone"],[8,"Pixel"],[3,"Border"],[3,"Rectangle"],[3,"Ellipse"],[3,"Paste"],[4,"ColorType"],[4,"DisposalMethod"],[3,"Frame"],[4,"LoopCount"],[3,"ImageSequence"],[3,"Font"],[4,"WrapStyle"],[3,"TextSegment"],[4,"HorizontalAnchor"],[4,"VerticalAnchor"],[3,"Image"],[6,"Result"],[3,"TextLayout"],[8,"Default"],[15,"usize"],[8,"DerefMut"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[4,"Error"],[4,"ColorType"],[4,"DecodingError"],[4,"Error"],[4,"EncodingError"],[4,"EncodingError"],[4,"EncodingError"],[3,"Error"],[4,"DecodingError"],[4,"Option"],[15,"u64"],[8,"Read"],[4,"DynamicFrameIterator"],[15,"u32"],[4,"OverlayMode"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"GifDecoder"],[3,"GifEncoder"],[3,"GifFrameIterator"],[3,"JpegDecoder"],[3,"JpegEncoder"],[4,"Compression"],[4,"FilterType"],[4,"AdaptiveFilterType"],[3,"PngDecoder"],[3,"PngEncoder"],[3,"Error"],[3,"ApngFrameIterator"],[4,"WebPQuality"],[3,"WebPEncoder"],[3,"NoOp"],[3,"NoOpSubpixel"],[15,"str"],[8,"AsRef"],[4,"ImageFormat"],[4,"ResizeAlgorithm"],[8,"From"],[3,"OsStr"],[8,"Fn"],[8,"ToOwned"],[3,"Path"],[15,"i32"],[8,"FnOnce"],[8,"Iterator"],[3,"Vec"],[3,"Duration"],[8,"Write"],[3,"File"],[15,"f32"],[3,"Font"],[8,"Decoder"],[8,"Alpha"],[8,"TrueColor"],[8,"Banded"],[8,"Paletted"],[8,"Draw"],[8,"Encoder"],[8,"FrameIterator"],[13,"BitPixel"],[13,"L"],[13,"Rgb"],[13,"Rgba"],[13,"Single"],[13,"Png"],[13,"Gif"],[13,"U8"],[13,"Bool"],[13,"InvalidHexCode"],[13,"InvalidExtension"],[13,"EncodingError"],[13,"DecodingError"],[13,"FontError"],[13,"IOError"],[13,"IncompatibleImageData"],[13,"Exactly"],[13,"Lossy"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
