var searchIndex = JSON.parse('{\
"ril":{"doc":"The Rust Imaging Library. A high-level image processing â€¦","t":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,3,4,13,8,3,13,13,3,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,10,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,4,8,8,13,16,11,11,10,10,10,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,12,13,4,13,13,13,13,13,13,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,13,4,3,13,13,4,13,13,4,13,13,13,13,3,3,13,13,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,4,13,13,13,13,6,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,8,13,13,3,4,13,13,4,13,13,13,13,13,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,8,3,13,4,3,13,8,3,13,3,13,12,10,11,11,10,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,12,12,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,12,12,12,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,13,13,13,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,13,3,3,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["Alpha","Banded","BitPixel","Border","BorderPosition","Decoder","DisposalMethod","Draw","Dynamic","DynamicFrameIterator","Ellipse","Encoder","Error","Frame","FrameIterator","Image","ImageFormat","ImageSequence","L","LoopCount","OverlayMode","Paste","Pixel","Rectangle","ResizeAlgorithm","Result","Rgb","Rgba","draw","encode","encodings","error","image","pixel","prelude","resize","sequence","Border","BorderPosition","Center","Draw","Ellipse","Inset","Outset","Paste","Rectangle","border","border","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","circle","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","color","default","default","default","default","draw","draw","draw","draw","eq","fill","fill","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bounding_box","from_bounding_box","hash","image","into","into","into","into","into","mask","new","new","new","new","overlay","overlay","overlay","position","position","position","position","radii","size","thickness","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","with_border","with_border","with_color","with_fill","with_fill","with_mask","with_mask_unchecked","with_overlay_mode","with_overlay_mode","with_overlay_mode","with_position","with_position","with_position","with_position","with_radii","with_size","with_size","with_thickness","Decoder","DynamicFrameIterator","Encoder","FrameIterator","Png","Sequence","borrow","borrow_mut","decode","decode_sequence","encode","encode_sequence","from","into","into_iter","into_sequence","into_sequence","is_empty","len","len","loop_count","loop_count","next","try_from","try_into","type_id","0","Bit","ColorType","L","L","LA","LA","Palette","Palette","PixelData","Rgb","Rgb","Rgba","Rgba","borrow","borrow","borrow_mut","borrow_mut","channels","clone","clone","clone_into","clone_into","data","eq","eq","fmt","fmt","from","from","from","from_raw","hash","hash","into","into","ne","png","to_owned","to_owned","try_from","try_from","try_into","try_into","type_data","type_id","type_id","0","0","0","0","0","0","1","1","1","2","2","3","Adaptive","AdaptiveFilterType","ApngFrameIterator","Avg","Best","Compression","Default","Fast","FilterType","Huffman","NoFilter","NonAdaptive","Paeth","PngDecoder","PngEncoder","Rle","Sub","Up","adaptive_filter","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","compression","decode","decode_sequence","default","default","default","default","encode","encode_sequence","eq","eq","filter","fmt","fmt","fmt","from","from","from","from","from","from","from_u8","into","into","into","into","into","into","into_iter","len","loop_count","new","new","next","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","with_adaptive_filter","with_compression","with_filter","DecodingError","EmptyImageError","EncodingError","Error","IOError","IncompatibleImageData","InvalidExtension","InvalidHexCode","Result","UnknownEncodingFormat","UnsupportedColorType","borrow","borrow_mut","fmt","fmt","from","from","from","from","into","to_string","try_from","try_into","type_id","0","0","0","0","0","height","received","width","Banded","Bmp","Gif","Image","ImageFormat","Jpeg","Merge","OverlayMode","Png","Replace","Tiff","Unknown","WebP","background_color","bands","bands","bands","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","convert","crop","cropped","data","decode_from_bytes","decode_inferred_from_bytes","default","default","dimensions","draw","encode","eq","eq","flip","flipped","fmt","fmt","fmt","fmt","format","from","from","from","from","from_bands","from_bands","from_bands","from_extension","from_fn","from_mime_type","from_path","from_pixels","get_pixel","hash","height","infer_encoding","into","into","into","invert","inverted","is_empty","is_unknown","len","map_data","map_in_place","map_pixels","map_pixels_with_coords","map_rows","mask_alpha","mirror","mirrored","new","open","overlay_mode","overlay_pixel","overlay_pixel_with_mode","paste","paste_with_mask","pixel","pixel_mut","pixels","resize","resized","rows","run_decoder","run_encoder","run_sequence_decoder","run_sequence_encoder","save","save_inferred","set_data","set_format","set_pixel","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","width","with","with_background_color","with_overlay_mode","0","0","Alpha","BitPixel","BitPixel","Dynamic","L","L","Pixel","Rgb","Rgb","Rgba","Rgba","a","alpha","alpha","alpha","as_pixel_data","as_pixel_data","as_pixel_data","as_pixel_data","as_pixel_data","as_pixel_data","b","b","black","black","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_hex","from_hex","from_pixel_data","from_pixel_data","from_pixel_data","from_pixel_data","from_pixel_data","from_pixel_data","from_rgb","g","g","into","into","into","into","into","inverted","inverted","inverted","inverted","inverted","inverted","luminance","merge","merge","ne","ne","ne","ne","ne","new","new","new","new","off","on","overlay","r","r","to_owned","to_owned","to_owned","to_owned","to_owned","transparent","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value","value","white","white","with_alpha","with_alpha","with_alpha","0","0","0","0","Alpha","Banded","BitPixel","Border","BorderPosition","DisposalMethod","Draw","Dynamic","DynamicFrameIterator","Ellipse","Frame","FrameIterator","Image","ImageFormat","ImageSequence","L","LoopCount","OverlayMode","Paste","Pixel","Rectangle","ResizeAlgorithm","Rgb","Rgba","Bicubic","Bilinear","Box","FilterType","Hamming","Lanczos3","Mitchell","Nearest","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","into","to_owned","try_from","try_into","type_id","Background","DisposalMethod","Exactly","Frame","ImageSequence","Infinite","LoopCount","None","Previous","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","count_or_zero","decode_from_bytes","decode_inferred_from_bytes","default","default","default","delay","dimensions","disposal","encode","eq","eq","extend_frames","first_frame","fmt","fmt","from","from","from","from","from","from_frames","from_image","from_iter","from_iter","hash","hash","height","image","image_mut","into","into","into","into","into_first_image","into_frames","into_image","into_iter","is_empty","iter","iter_mut","len","loop_count","looped_exactly","looped_infinitely","ne","new","open","push_frame","save","save_inferred","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","width","with_delay","with_disposal","with_frame","with_loop_count","0"],"q":["ril","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ril::draw","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ril::encode","","","","","","","","","","","","","","","","","","","","","","","","","","ril::encode::DynamicFrameIterator","ril::encodings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ril::encodings::PixelData","","","","","","","","","","","","ril::encodings::png","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ril::error","","","","","","","","","","","","","","","","","","","","","","","","ril::error::Error","","","","","","","","ril::image","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ril::pixel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ril::pixel::Dynamic","","","","ril::prelude","","","","","","","","","","","","","","","","","","","","","","","","ril::resize","","","","","","","","","","","","","","","","","","","","","ril::sequence","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ril::sequence::LoopCount"],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An interfacing layer between <code>fast_image_resize</code> and this â€¦","","Represents a shape border.","Represents whether a border is inset, outset, or if it â€¦","A border that is balanced between the inside and outside â€¦","","An ellipse, which could be a circle.","An inset border. May overlap the contents of inside the â€¦","An outset border. May overlap the contents of outside the â€¦","Pastes or overlays an image on top of another image.","A rectangle.","The border data of the rectangle, or None if there is no â€¦","","","","","","","","","","","","Creates a new circle with the given center position and â€¦","","","","","","","","","","","The color of the border.","","","","","Draws the object to the given image.","","","","","The fill color of the rectangle, or None if there is no â€¦","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new rectangle from two coordinates specified as â€¦","Creates a new ellipse from the given bounding box.","","The image to paste, or the foreground image.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","An image that masks or filters out pixels based on the â€¦","todo!()","Creates a new rectangle with default values.","Creates a new ellipse.","Creates a new image paste with from the given image with â€¦","The overlay mode of the rectangle, or None to inherit from â€¦","","The overlay mode of the image, or None to inherit from the â€¦","The position of the border.","The position of the rectangle. The top-left corner of the â€¦","The center position of the ellipse. The center of this â€¦","The position of the image to paste.","The radii of the ellipse, in pixels; (horizontal, â€¦","The dimensions of the rectangle, in pixels.","The thickness of the border, in pixels.","","","","","","","","","","","","","","","","","","","","","Sets the border information of the rectangle.","Sets the border of the ellipse.","","Sets the fill color of the rectangle.","Sets the fill color of the ellipse.","Sets the mask image to use. Currently this is only limited â€¦","Sets the mask image to use. Currently this is only limited â€¦","Sets the overlay mode of the rectangle.","Sets the overlay mode of the ellipse.","Sets the overlay mode of the image.","","Sets the position of the rectangle.","Sets the position of the ellipse.","Sets the position of where to paste the image at. The â€¦","Sets the radii of the ellipse in pixels.","Sets the size of the rectangle in pixels.","Sets the diameters of the ellipse in pixels.","todo!()","Low-level decoder interface around an image format.","Represents any one of the different types of frame â€¦","Low-level encoder interface around an image format.","Represents the lazy decoding of frames from an encoded â€¦","A PNG or APNG frame iterator.","The type of the iterator returned by <code>decode_sequence</code>.","","","Decodes the given stream into an image.","Decodes the given stream into a frame iterator.","Encodes the given image into the given writer.","Encodes the given image sequence into the given writer.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Collects all frames in this iterator and turns it into a â€¦","","Returns if there are no frames in the sequence. In this â€¦","Returns the number of frames in the sequence.","","Returns the amount of times this sequence will loop over â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the raw data of the pixel.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Creates the pixel from raw data.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","The filtering method for preprocessing scanline data â€¦","","","Higher compression level","The type and strength of applied compression.","Default level","Fast minimal compression","The byte level filter applied to scanlines to prepare them â€¦","","","","","A PNG decoder interface around <code>png::Decoder</code>.","A PNG encoder interface around <code>png::Encoder</code>.","","","","The adaptive filter type to use.","","","","","","","","","","","","","","","","","","","The compression to use.","","","","","","","","","","","The filter type to use.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","u8 -&gt; Self. Temporary solution until Rust provides a â€¦","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Creates a new encoder with the default settings.","Creates a new decoder with the default settings.","","","","","","","","","","","","","","","","","","","","","","","Sets the adaptive filter type to use.","Sets the compression level to use.","Sets the filter type to use.","Invalid data was encountered when an image, usually â€¦","Tried to encode an empty image, or an image without data.","Failed to encode an image.","Represents an error that occurs within the crate.","An error occured when trying to read a file or when trying â€¦","An image received data incompatible with the imageâ€™s â€¦","An invalid extension was provided when trying to resolve â€¦","An invalid hex code was provided when trying to parse a â€¦","","No encoding format could be inferred for the given image.","Received an unsupported color type when trying to create a â€¦","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Represents an image with multiple channels, called bands.","The image is encoded in the BMP format.","The image is encoded in the GIF format.","A high-level image representation.","Represents the underlying encoding format of an image.","The image is encoded in the JPEG format.","Merge the alpha values of overlay image with the alpha â€¦","The behavior to use when overlaying images on top of each â€¦","The image is encoded in the PNG format.","Replace alpha values with the alpha values of the overlay â€¦","The image is encoded in the TIFF format.","No known encoding is known for the image.","The image is encoded in the WebP format.","Returns the background color of the image.","Takes this image and returns its bands.","","","","","","","","","","","","","","","Converts the image into an image with the given pixel type.","Crops this image in place to the given bounding box.","Takes this image and crops it to the given box. Useful for â€¦","A 1-dimensional vector of pixels representing all pixels â€¦","Decodes an image with the explicitly given image encoding â€¦","Decodes an image from the given read stream of bytes, â€¦","","","Returns the dimensions of the image.","Draws an object or shape onto this image.","Encodes the image with the given encoding and writes it to â€¦","","","Flips this image vertically (about the x-axis) in place.","Takes this image and flips it vertically, or about the â€¦","","","","","Returns the encoding format of the image. This is nothing â€¦","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new image from the given bands.","","","Parses the given extension and returns the corresponding â€¦","Creates a new image with the given width and height. The â€¦","Returns the format specified by the given MIME type.","Returns the format specified by the given path.","Creates a new image shaped with the given width and a â€¦","Returns a reference of the pixel at the given coordinates, â€¦","","Returns the height of the image.","Infers the encoding format from the given data via a byte â€¦","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Inverts this image in place.","Takes this image and inverts it. Useful for method â€¦","Returns true if the image contains no pixels.","Returns whether the extension is unknown.","Returns the amount of pixels in the image.","Returns the image replaced with the given data. It is up â€¦","Similar to [<code>map_pixels_with_coords</code>], but this maps the â€¦","Returns the image with each pixel in the image mapped to â€¦","Returns the image with the each pixel in the image mapped â€¦","Returns the image with each row of pixels represented as a â€¦","Masks the alpha values of this image with the luminance â€¦","Mirrors, or flips this image horizontally (about the â€¦","Takes this image and flips it horizontally (about the â€¦","Creates a new image with the given width and height, with â€¦","Opens a file from the given path and decodes it into an â€¦","Returns the overlay mode of the image.","Overlays the pixel at the given coordinates with the given â€¦","Overlays the pixel at the given coordinates with the given â€¦","Pastes the given image onto this image at the given x and â€¦","Pastes the given image onto this image at the given x and â€¦","Returns a reference of the pixel at the given coordinates.","Returns a mutable reference to the pixel at the given â€¦","Returns a Vec of slices representing the pixels of the â€¦","Resizes this image in place to the given dimensions using â€¦","Takes this image and resizes this image to the given â€¦","Iterates over each row of pixels in the image.","Decodes the image data from into an image.","Encodes the <code>Image</code> into raw bytes.","Decodes the image sequence data into an image sequence.","Encodes the <code>ImageSequence</code> into raw bytes. If the encoding â€¦","Saves the image with the given encoding to the given path. â€¦","Saves the image to the given path, inferring the encoding â€¦","Sets the data of this image to the new data. This is used â€¦","Sets the encoding format of this image. Note that when â€¦","Sets the pixel at the given coordinates to the given pixel.","","","","","","","","","","","","","","","Returns the width of the image.","Takes this image, draws the given object or shape onto it, â€¦","Returns the same image with its background color set to â€¦","Returns the same image with its overlay mode set to the â€¦","Whether the pixel is on.","The luminance value of the pixel, between 0 and 255.","Represents a pixel that supports alpha, or transparency â€¦","Represents a single-bit pixel that represents either a â€¦","","Represents a pixel type that is dynamically resolved.","Represents an L, or luminance pixel that is stored as only â€¦","","Represents any type of pixel in an image.","Represents an RGB pixel.","","Represents an RGBA pixel.","","The alpha component of the pixel.","Returns the alpha, or opacity level of the pixel.","","","Creates raw pixel data from this pixel type.","","","","","","The blue component of the pixel.","The blue component of the pixel.","Creates a completely black pixel.","Creates an opaque black pixel.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Parses an RGB pixel from a hex value.","Parses an RGBA pixel from a hex value.","Creates this pixel from raw data.","","","","","","Creates an opaque pixel from an RGB pixel.","The green component of the pixel.","The green component of the pixel.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the inverted value of this pixel.","","","","","","The luminance of the pixel.","Merges this pixel with the given overlay pixel, taking â€¦","","","","","","","Returns a new <code>BitPixel</code> with the given value.","Creates a new L pixel with the given luminance value.","Creates a new RGB pixel.","Creates a new RGBA pixel.","Returns a new <code>BitPixel</code> that is off.","Returns a new <code>BitPixel</code> that is on.","Overlays this pixel with the given overlay pixel, abiding â€¦","The red component of the pixel.","The red component of the pixel.","","","","","","Creates a completely transparent pixel.","","","","","","","","","","","","","","","","Returns the value of the pixel.","Returns the luminance value of the pixel.","Creates a completely white pixel.","Creates an opaque white pixel.","Clones this pixel with the given alpha value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A Catmull-Rom bicubic filter, which is the most common â€¦","A bilinear filter. Calculates output pixel value using â€¦","A box filter algorithm. Equivalent to the [<code>Nearest</code>] filter â€¦","A filtering algorithm that is used to resize an image.","While having similar performance as the [<code>Bilinear</code>] filter, â€¦","A Lanczos filter with a window of 3. Calculates output â€¦","A Mitchell-Netravali bicubic filter. Just like all cubic â€¦","A simple nearest neighbor algorithm. Although the fastest, â€¦","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Dispose the current frame completely and replace it with â€¦","The method used to dispose a frame before transitioning to â€¦","Loops the specified amount of times.","Represents a frame in an image sequence. It encloses an â€¦","Represents a sequence of image frames such as an animated â€¦","Loops infinitely.","","Do not dispose the current frame. Usually not desired for â€¦","Dispose and replace the current frame with the previous â€¦","","","","","","","","","","","","","","","","","Returns the exact number of times this loop should be â€¦","Decodes the image sequence with the explicitly given image â€¦","Decodes an image sequence from the given read stream of â€¦","","","","Returns the delay duration for this frame.","Returns the dimensions of this frame.","Returns the disposal method for this frame.","Encodes this image sequence with the given encoding and â€¦","","","Extends frames from the given iterator.","Returns a reference to the first frame in the image â€¦","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new image sequence from the given frames","Creates a new frame with the given image and default â€¦","","","","","Returns the height of this frame.","Returns a reference to the image this frame contains.","Returns a mutable reference to the image this frame â€¦","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this image sequence and returns the first image.","Consumes this image sequence and returns the frames it â€¦","Consumes this frame returning the inner image it â€¦","","Returns whether there are no frames in the image sequence. â€¦","Iterates through the frames in this image sequence by â€¦","Iterates through the frames in this image sequence by â€¦","Returns the number of frames in this image sequence.","Returns how many times this image sequence loops for.","Sets the exact number of loops this image sequence loops â€¦","Sets the image sequence to loop infinitely.","","Creates a new image sequence with no frames.","Opens a file from the given path and decodes it, returning â€¦","Adds a new frame to this image sequence.","Saves the image sequence with the given encoding to the â€¦","Saves the image sequence to the given path, inferring the â€¦","","","","","","","","","","","","","","","","","Returns the width of this frame.","Sets the frame delay to the given duration.","Sets the disposal method for this frame when transitioning â€¦","Adds a new frame to this image sequence and returns this â€¦","Sets how many times this image sequence loops for.",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,2,3,1,4,2,3,5,1,4,2,3,5,3,1,4,2,3,5,1,4,2,3,5,4,1,4,2,3,6,2,3,5,1,2,3,1,4,2,3,1,4,2,3,5,2,3,1,5,1,4,2,3,5,5,4,2,3,5,2,3,5,4,2,3,5,3,2,4,1,4,2,3,5,1,4,2,3,5,1,4,2,3,5,1,4,2,3,5,2,3,4,2,3,5,5,2,3,5,4,2,3,5,3,2,3,4,0,0,0,0,7,8,7,7,8,8,9,9,7,7,7,10,7,10,10,7,10,7,7,7,7,7,11,12,0,13,12,13,12,13,12,0,13,12,13,12,13,12,13,12,13,13,12,13,12,12,13,12,13,12,13,13,12,12,13,12,13,12,12,0,13,12,13,12,13,12,12,13,12,14,15,16,17,18,19,16,17,18,17,18,18,20,0,0,21,22,0,22,22,0,22,21,20,21,0,0,22,21,21,23,23,24,25,22,21,20,23,24,25,22,21,20,22,21,20,22,21,20,23,24,24,23,24,21,20,23,23,21,20,23,22,21,20,23,24,25,22,21,20,21,23,24,25,22,21,20,25,25,25,23,24,25,22,21,20,23,24,25,22,21,20,23,24,25,22,21,20,23,24,25,22,21,20,23,23,23,26,26,26,0,26,26,26,26,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,28,29,30,31,32,32,32,0,33,33,0,0,33,34,0,33,34,33,33,33,35,36,35,35,34,35,33,34,35,33,34,35,33,34,35,33,35,35,35,35,35,35,34,33,35,35,35,34,33,35,35,34,34,33,33,35,34,35,35,33,36,35,35,33,35,33,33,35,35,33,35,33,34,35,33,35,35,35,33,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,33,33,33,33,35,35,35,35,35,34,35,33,34,33,34,35,33,34,35,33,34,35,33,35,35,35,35,37,38,0,0,39,0,0,39,0,0,39,0,39,40,41,40,39,42,37,38,43,40,39,43,40,43,40,37,38,43,40,39,37,38,43,40,39,37,38,43,40,39,37,38,43,40,39,37,38,43,40,39,37,38,43,40,39,37,38,43,40,39,37,37,37,37,37,38,38,38,38,38,43,43,43,43,43,40,40,40,40,40,39,39,39,39,39,43,40,42,37,38,43,40,39,40,43,40,37,38,43,40,39,42,37,38,43,40,39,42,42,40,37,38,43,40,39,37,38,43,40,37,37,42,43,40,37,38,43,40,39,40,37,38,43,40,39,37,38,43,40,39,37,38,43,40,39,37,38,43,40,41,40,39,44,45,46,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,48,48,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,49,0,50,0,0,50,0,49,49,49,51,50,52,49,51,50,52,49,51,50,52,49,51,50,52,50,52,52,49,50,52,51,51,51,52,49,50,52,52,49,50,49,51,51,50,52,52,51,52,52,49,50,51,51,51,49,51,50,52,52,52,51,52,52,52,52,52,52,52,52,50,52,52,52,52,52,49,51,50,52,49,51,50,52,49,51,50,52,49,51,50,52,51,51,51,52,52,53],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["u32",0],["u32",0],["u32",0]]],[[["",0]],["borderposition",4]],[[["",0]],["border",3]],[[["",0]],["rectangle",3]],[[["",0]],["ellipse",3]],[[["",0]],["paste",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[],["borderposition",4]],[[],["border",3]],[[],["rectangle",3]],[[],["ellipse",3]],[[["",0],["image",3]]],[[["",0],["image",3]]],[[["",0],["image",3]]],[[["",0],["image",3]]],[[["",0],["borderposition",4]],["bool",0]],null,null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["u32",0],["u32",0],["u32",0],["u32",0]]],[[["u32",0],["u32",0],["u32",0],["u32",0]]],[[["",0],["",0]]],null,[[]],[[]],[[]],[[]],[[]],null,[[["u32",0]]],[[]],[[]],[[["image",3]]],null,null,null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["border",3]]],[[["border",3]]],[[]],[[]],[[]],[[["image",3,[["bitpixel",3]]]]],[[["image",3,[["bitpixel",3]]]]],[[["overlaymode",4]]],[[["overlaymode",4]]],[[["overlaymode",4]]],[[["borderposition",4]]],[[["u32",0],["u32",0]]],[[["u32",0],["u32",0]]],[[["u32",0],["u32",0]]],[[["u32",0],["u32",0]]],[[["u32",0],["u32",0]]],[[["u32",0],["u32",0]]],[[["u32",0]]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["result",6,[["image",3]]]],[[["",0]],["result",6]],[[["",0],["image",3]],["result",6]],[[["",0],["imagesequence",3]],["result",6]],[[]],[[]],[[]],[[],["result",6,[["imagesequence",3]]]],[[],["result",6,[["imagesequence",3]]]],[[["",0]],["bool",0]],[[["",0]],["u32",0]],[[["",0]],["u32",0]],[[["",0]],["loopcount",4]],[[["",0]],["loopcount",4]],[[["",0]],["option",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["usize",0]],[[["",0]],["colortype",4]],[[["",0]],["pixeldata",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["vec",3,[["u8",0]]]],[[["",0],["colortype",4]],["bool",0]],[[["",0],["pixeldata",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["colortype",4]]],[[]],[[["colortype",4],["u8",0]],["result",6]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[["",0],["pixeldata",4]],["bool",0]],null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["compression",4]],[[["",0]],["filtertype",4]],[[["",0]],["adaptivefiltertype",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[["",0]],["result",6,[["image",3]]]],[[["",0]],["result",6]],[[]],[[]],[[],["filtertype",4]],[[],["adaptivefiltertype",4]],[[["",0],["image",3]],["result",6]],[[["",0],["imagesequence",3]],["result",6]],[[["",0],["filtertype",4]],["bool",0]],[[["",0],["adaptivefiltertype",4]],["bool",0]],null,[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u8",0]],["option",4,[["filtertype",4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["u32",0]],[[["",0]],["loopcount",4]],[[]],[[]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["adaptivefiltertype",4]]],[[["compression",4]]],[[["filtertype",4]]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["error",3]]],[[["encodingerror",4]]],[[["decodingerror",4]]],[[]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["overlaymode",4]],[[["",0]],["image",3]],[[["",0]],["imageformat",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["image",3,[["",26,[["pixel",8],["from",8]]]]]],[[["",0],["u32",0],["u32",0],["u32",0],["u32",0]]],[[["u32",0],["u32",0],["u32",0],["u32",0]]],null,[[["imageformat",4]],["result",6]],[[],["result",6]],[[],["overlaymode",4]],[[],["imageformat",4]],[[["",0]]],[[["",0]]],[[["",0],["imageformat",4]],["result",6]],[[["",0],["overlaymode",4]],["bool",0]],[[["",0],["imageformat",4]],["bool",0]],[[["",0]]],[[]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0]],["imageformat",4]],[[]],[[["frame",3]]],[[]],[[]],[[]],[[]],[[]],[[],["result",6]],[[["u32",0],["u32",0]]],[[]],[[],["result",6]],[[["u32",0]]],[[["",0],["u32",0],["u32",0]],["option",4]],[[["",0],["",0]]],[[["",0]],["u32",0]],[[]],[[]],[[]],[[]],[[["",0]]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["u32",0]],[[],["image",3,[["pixel",8]]]],[[["",0]]],[[],["image",3,[["pixel",8]]]],[[],["image",3,[["pixel",8]]]],[[],["image",3,[["pixel",8]]]],[[["",0],["image",3]]],[[["",0]]],[[]],[[["u32",0],["u32",0]]],[[],["result",6]],[[["",0]],["overlaymode",4]],[[["",0],["u32",0],["u32",0]]],[[["",0],["u32",0],["u32",0],["overlaymode",4]]],[[["",0],["u32",0],["u32",0]]],[[["",0],["u32",0],["u32",0],["image",3,[["bitpixel",3]]]]],[[["",0],["u32",0],["u32",0]],["",0]],[[["",0],["u32",0],["u32",0]],["",0]],[[["",0]],["vec",3]],[[["",0],["u32",0],["u32",0],["resizealgorithm",4]]],[[["u32",0],["u32",0],["resizealgorithm",4]]],[[["",0]]],[[["",0]],["result",6,[["image",3,[["pixel",8]]]]]],[[["",0],["image",3]],["result",6]],[[["",0],["read",8]],["result",6,[["dynamicframeiterator",4,[["pixel",8],["read",8]]]]]],[[["",0],["imagesequence",3]],["result",6]],[[["",0],["imageformat",4]],["result",6]],[[["",0]],["result",6]],[[["",0],["vec",3]]],[[["",0],["imageformat",4]]],[[["",0],["u32",0],["u32",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["u32",0]],[[]],[[]],[[["overlaymode",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["pixeldata",4]],[[["",0]],["pixeldata",4]],[[["",0]],["pixeldata",4]],[[["",0]],["pixeldata",4]],[[["",0]],["pixeldata",4]],[[["",0]],["pixeldata",4]],null,null,[[]],[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["bitpixel",3]],[[["",0]],["l",3]],[[["",0]],["rgb",3]],[[["",0]],["rgba",3]],[[["",0]],["dynamic",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["bitpixel",3]],[[],["l",3]],[[],["rgb",3]],[[],["rgba",3]],[[]],[[["",0],["bitpixel",3]],["bool",0]],[[["",0],["l",3]],["bool",0]],[[["",0],["rgb",3]],["bool",0]],[[["",0],["rgba",3]],["bool",0]],[[["",0],["dynamic",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["rgba",3]]],[[["dynamic",4]]],[[["l",3]]],[[["rgb",3]]],[[]],[[["rgba",3]]],[[["dynamic",4]]],[[["rgb",3]]],[[["bitpixel",3]]],[[["dynamic",4]]],[[["l",3]]],[[["bitpixel",3]]],[[]],[[["rgba",3]]],[[["rgb",3]]],[[["dynamic",4]]],[[]],[[["bitpixel",3]]],[[["l",3]]],[[]],[[["rgba",3]]],[[["bitpixel",3]]],[[["l",3]]],[[["rgb",3]]],[[],["result",6]],[[["str",0]],["result",6]],[[["pixeldata",4]],["result",6]],[[["pixeldata",4]],["result",6]],[[["pixeldata",4]],["result",6]],[[["pixeldata",4]],["result",6]],[[["pixeldata",4]],["result",6]],[[["pixeldata",4]],["result",6]],[[["rgb",3]]],null,null,[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["u8",0]],[[]],[[]],[[["",0],["bitpixel",3]],["bool",0]],[[["",0],["l",3]],["bool",0]],[[["",0],["rgb",3]],["bool",0]],[[["",0],["rgba",3]],["bool",0]],[[["",0],["dynamic",4]],["bool",0]],[[["bool",0]]],[[["u8",0]]],[[["u8",0],["u8",0],["u8",0]]],[[["u8",0],["u8",0],["u8",0],["u8",0]]],[[]],[[]],[[["overlaymode",4]]],null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["bool",0]],[[["",0]],["u8",0]],[[]],[[]],[[["u8",0]]],[[["u8",0]]],[[["u8",0]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["filtertype",4]],[[["",0],["",0]]],[[],["filtertype",4]],[[["",0],["filtertype",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["disposalmethod",4]],[[["",0]],["frame",3]],[[["",0]],["loopcount",4]],[[["",0]],["imagesequence",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["u32",0]],[[["imageformat",4],["read",8]],["result",6,[["dynamicframeiterator",4,[["read",8]]]]]],[[["",26,[["read",8],["write",8]]]],["result",6,[["dynamicframeiterator",4,[["",26,[["read",8],["write",8]]]]]]]],[[],["disposalmethod",4]],[[],["loopcount",4]],[[],["imagesequence",3]],[[["",0]],["duration",3]],[[["",0]]],[[["",0]],["disposalmethod",4]],[[["",0],["imageformat",4]],["result",6]],[[["",0],["disposalmethod",4]],["bool",0]],[[["",0],["loopcount",4]],["bool",0]],[[["",0]]],[[["",0]],["frame",3]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["image",3]]],[[]],[[]],[[["vec",3,[["frame",3]]]]],[[["image",3]]],[[]],[[]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["u32",0]],[[["",0]],["image",3]],[[["",0]],["image",3]],[[]],[[]],[[]],[[]],[[],["image",3]],[[],["vec",3,[["frame",3]]]],[[],["image",3]],[[]],[[["",0]],["bool",0]],[[["",0]]],[[["",0]]],[[["",0]],["usize",0]],[[["",0]],["loopcount",4]],[[["u32",0]]],[[]],[[["",0],["loopcount",4]],["bool",0]],[[]],[[],["result",6,[["dynamicframeiterator",4,[["file",3]]]]]],[[["",0],["frame",3]]],[[["",0],["imageformat",4]],["result",6]],[[["",0]],["result",6]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["u32",0]],[[["duration",3]]],[[["disposalmethod",4]]],[[["frame",3]]],[[["loopcount",4]]],null],"p":[[4,"BorderPosition"],[3,"Rectangle"],[3,"Ellipse"],[3,"Border"],[3,"Paste"],[8,"Draw"],[4,"DynamicFrameIterator"],[8,"Decoder"],[8,"Encoder"],[8,"FrameIterator"],[13,"Png"],[4,"PixelData"],[4,"ColorType"],[13,"Bit"],[13,"L"],[13,"LA"],[13,"Rgb"],[13,"Rgba"],[13,"Palette"],[4,"AdaptiveFilterType"],[4,"FilterType"],[4,"Compression"],[3,"PngEncoder"],[3,"PngDecoder"],[3,"ApngFrameIterator"],[4,"Error"],[13,"InvalidHexCode"],[13,"InvalidExtension"],[13,"EncodingError"],[13,"DecodingError"],[13,"IOError"],[13,"IncompatibleImageData"],[4,"ImageFormat"],[4,"OverlayMode"],[3,"Image"],[8,"Banded"],[3,"BitPixel"],[3,"L"],[4,"Dynamic"],[3,"Rgba"],[8,"Alpha"],[8,"Pixel"],[3,"Rgb"],[13,"BitPixel"],[13,"L"],[13,"Rgb"],[13,"Rgba"],[4,"FilterType"],[4,"DisposalMethod"],[4,"LoopCount"],[3,"Frame"],[3,"ImageSequence"],[13,"Exactly"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};